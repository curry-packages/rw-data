Prog "ReadWriteBase" ["Prelude","Data.List","Data.Map","Data.Maybe","System.IO"] [Type ("ReadWriteBase","_Dict#ReadWrite") Public [(0,KStar)] [Cons ("ReadWriteBase","_Dict#ReadWrite") 7 Public [FuncType (TCons ("Data.Map","Map") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","(,)") [TVar 0,TCons ("Prelude","[]") [TCons ("Prelude","Char") []]])),FuncType (TCons ("Data.Map","Map") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TVar 0) (TCons ("Prelude","(,)") [TCons ("Data.Map","Map") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])])),FuncType (TVar 0) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]),FuncType (TCons ("System.IO","Handle") []) (FuncType (TVar 0) (FuncType (TCons ("Data.Map","Map") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","IO") [TCons ("Data.Map","Map") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))),FuncType (TCons ("Data.Map","Map") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]])),FuncType (TCons ("Data.Map","Map") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","(,)") [TCons ("Data.Map","Map") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])])),FuncType (TCons ("System.IO","Handle") []) (FuncType (TCons ("Prelude","[]") [TVar 0]) (FuncType (TCons ("Data.Map","Map") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","IO") [TCons ("Data.Map","Map") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))]]] [Func ("ReadWriteBase","_def#readRW#ReadWriteBase.ReadWrite") 100000 Public (ForallType [(0,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("ReadWriteBase","_Dict#ReadWrite") [TVar 0])) (FuncType (TCons ("Data.Map","Map") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","(,)") [TVar 0,TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]))))) (Rule [1] (Comb FuncCall ("Prelude","error") [Comb ConsCall ("Prelude",":") [Lit (Charc 'N'),Comb ConsCall ("Prelude",":") [Lit (Charc 'o'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude",":") [Lit (Charc 'i'),Comb ConsCall ("Prelude",":") [Lit (Charc 'n'),Comb ConsCall ("Prelude",":") [Lit (Charc 's'),Comb ConsCall ("Prelude",":") [Lit (Charc 't'),Comb ConsCall ("Prelude",":") [Lit (Charc 'a'),Comb ConsCall ("Prelude",":") [Lit (Charc 'n'),Comb ConsCall ("Prelude",":") [Lit (Charc 'c'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude",":") [Lit (Charc 'o'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude",":") [Lit (Charc 'd'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc 'f'),Comb ConsCall ("Prelude",":") [Lit (Charc 'a'),Comb ConsCall ("Prelude",":") [Lit (Charc 'u'),Comb ConsCall ("Prelude",":") [Lit (Charc 'l'),Comb ConsCall ("Prelude",":") [Lit (Charc 't'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude",":") [Lit (Charc 'm'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc 't'),Comb ConsCall ("Prelude",":") [Lit (Charc 'h'),Comb ConsCall ("Prelude",":") [Lit (Charc 'o'),Comb ConsCall ("Prelude",":") [Lit (Charc 'd'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude",":") [Lit (Charc 'f'),Comb ConsCall ("Prelude",":") [Lit (Charc 'o'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude",":") [Lit (Charc 'c'),Comb ConsCall ("Prelude",":") [Lit (Charc 'l'),Comb ConsCall ("Prelude",":") [Lit (Charc 'a'),Comb ConsCall ("Prelude",":") [Lit (Charc 's'),Comb ConsCall ("Prelude",":") [Lit (Charc 's'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude",":") [Lit (Charc 'o'),Comb ConsCall ("Prelude",":") [Lit (Charc 'p'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude",":") [Lit (Charc 'a'),Comb ConsCall ("Prelude",":") [Lit (Charc 't'),Comb ConsCall ("Prelude",":") [Lit (Charc 'i'),Comb ConsCall ("Prelude",":") [Lit (Charc 'o'),Comb ConsCall ("Prelude",":") [Lit (Charc 'n'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude",":") [Lit (Charc '`'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc 'a'),Comb ConsCall ("Prelude",":") [Lit (Charc 'd'),Comb ConsCall ("Prelude",":") [Lit (Charc 'R'),Comb ConsCall ("Prelude",":") [Lit (Charc 'W'),Comb ConsCall ("Prelude",":") [Lit (Charc '\''),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]])),Func ("ReadWriteBase","_def#showRW#ReadWriteBase.ReadWrite") 100000 Public (ForallType [(0,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("ReadWriteBase","_Dict#ReadWrite") [TVar 0])) (FuncType (TCons ("Data.Map","Map") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TVar 0) (TCons ("Prelude","(,)") [TCons ("Data.Map","Map") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])]))))) (Rule [1] (Comb FuncCall ("Prelude","error") [Comb ConsCall ("Prelude",":") [Lit (Charc 'N'),Comb ConsCall ("Prelude",":") [Lit (Charc 'o'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude",":") [Lit (Charc 'i'),Comb ConsCall ("Prelude",":") [Lit (Charc 'n'),Comb ConsCall ("Prelude",":") [Lit (Charc 's'),Comb ConsCall ("Prelude",":") [Lit (Charc 't'),Comb ConsCall ("Prelude",":") [Lit (Charc 'a'),Comb ConsCall ("Prelude",":") [Lit (Charc 'n'),Comb ConsCall ("Prelude",":") [Lit (Charc 'c'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude",":") [Lit (Charc 'o'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude",":") [Lit (Charc 'd'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc 'f'),Comb ConsCall ("Prelude",":") [Lit (Charc 'a'),Comb ConsCall ("Prelude",":") [Lit (Charc 'u'),Comb ConsCall ("Prelude",":") [Lit (Charc 'l'),Comb ConsCall ("Prelude",":") [Lit (Charc 't'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude",":") [Lit (Charc 'm'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc 't'),Comb ConsCall ("Prelude",":") [Lit (Charc 'h'),Comb ConsCall ("Prelude",":") [Lit (Charc 'o'),Comb ConsCall ("Prelude",":") [Lit (Charc 'd'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude",":") [Lit (Charc 'f'),Comb ConsCall ("Prelude",":") [Lit (Charc 'o'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude",":") [Lit (Charc 'c'),Comb ConsCall ("Prelude",":") [Lit (Charc 'l'),Comb ConsCall ("Prelude",":") [Lit (Charc 'a'),Comb ConsCall ("Prelude",":") [Lit (Charc 's'),Comb ConsCall ("Prelude",":") [Lit (Charc 's'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude",":") [Lit (Charc 'o'),Comb ConsCall ("Prelude",":") [Lit (Charc 'p'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude",":") [Lit (Charc 'a'),Comb ConsCall ("Prelude",":") [Lit (Charc 't'),Comb ConsCall ("Prelude",":") [Lit (Charc 'i'),Comb ConsCall ("Prelude",":") [Lit (Charc 'o'),Comb ConsCall ("Prelude",":") [Lit (Charc 'n'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude",":") [Lit (Charc '`'),Comb ConsCall ("Prelude",":") [Lit (Charc 's'),Comb ConsCall ("Prelude",":") [Lit (Charc 'h'),Comb ConsCall ("Prelude",":") [Lit (Charc 'o'),Comb ConsCall ("Prelude",":") [Lit (Charc 'w'),Comb ConsCall ("Prelude",":") [Lit (Charc 'R'),Comb ConsCall ("Prelude",":") [Lit (Charc 'W'),Comb ConsCall ("Prelude",":") [Lit (Charc '\''),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]])),Func ("ReadWriteBase","_def#showType#ReadWriteBase.ReadWrite") 100000 Public (ForallType [(0,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("ReadWriteBase","_Dict#ReadWrite") [TVar 0])) (FuncType (TVar 0) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])))) (Rule [1] (Comb FuncCall ("Prelude","error") [Comb ConsCall ("Prelude",":") [Lit (Charc 'N'),Comb ConsCall ("Prelude",":") [Lit (Charc 'o'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude",":") [Lit (Charc 'i'),Comb ConsCall ("Prelude",":") [Lit (Charc 'n'),Comb ConsCall ("Prelude",":") [Lit (Charc 's'),Comb ConsCall ("Prelude",":") [Lit (Charc 't'),Comb ConsCall ("Prelude",":") [Lit (Charc 'a'),Comb ConsCall ("Prelude",":") [Lit (Charc 'n'),Comb ConsCall ("Prelude",":") [Lit (Charc 'c'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude",":") [Lit (Charc 'o'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude",":") [Lit (Charc 'd'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc 'f'),Comb ConsCall ("Prelude",":") [Lit (Charc 'a'),Comb ConsCall ("Prelude",":") [Lit (Charc 'u'),Comb ConsCall ("Prelude",":") [Lit (Charc 'l'),Comb ConsCall ("Prelude",":") [Lit (Charc 't'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude",":") [Lit (Charc 'm'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc 't'),Comb ConsCall ("Prelude",":") [Lit (Charc 'h'),Comb ConsCall ("Prelude",":") [Lit (Charc 'o'),Comb ConsCall ("Prelude",":") [Lit (Charc 'd'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude",":") [Lit (Charc 'f'),Comb ConsCall ("Prelude",":") [Lit (Charc 'o'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude",":") [Lit (Charc 'c'),Comb ConsCall ("Prelude",":") [Lit (Charc 'l'),Comb ConsCall ("Prelude",":") [Lit (Charc 'a'),Comb ConsCall ("Prelude",":") [Lit (Charc 's'),Comb ConsCall ("Prelude",":") [Lit (Charc 's'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude",":") [Lit (Charc 'o'),Comb ConsCall ("Prelude",":") [Lit (Charc 'p'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude",":") [Lit (Charc 'a'),Comb ConsCall ("Prelude",":") [Lit (Charc 't'),Comb ConsCall ("Prelude",":") [Lit (Charc 'i'),Comb ConsCall ("Prelude",":") [Lit (Charc 'o'),Comb ConsCall ("Prelude",":") [Lit (Charc 'n'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude",":") [Lit (Charc '`'),Comb ConsCall ("Prelude",":") [Lit (Charc 's'),Comb ConsCall ("Prelude",":") [Lit (Charc 'h'),Comb ConsCall ("Prelude",":") [Lit (Charc 'o'),Comb ConsCall ("Prelude",":") [Lit (Charc 'w'),Comb ConsCall ("Prelude",":") [Lit (Charc 'T'),Comb ConsCall ("Prelude",":") [Lit (Charc 'y'),Comb ConsCall ("Prelude",":") [Lit (Charc 'p'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc '\''),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]])),Func ("ReadWriteBase","_def#writeRW#ReadWriteBase.ReadWrite") 100000 Public (ForallType [(0,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("ReadWriteBase","_Dict#ReadWrite") [TVar 0])) (FuncType (TCons ("System.IO","Handle") []) (FuncType (TVar 0) (FuncType (TCons ("Data.Map","Map") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","IO") [TCons ("Data.Map","Map") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))))) (Rule [1] (Comb FuncCall ("Prelude","error") [Comb ConsCall ("Prelude",":") [Lit (Charc 'N'),Comb ConsCall ("Prelude",":") [Lit (Charc 'o'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude",":") [Lit (Charc 'i'),Comb ConsCall ("Prelude",":") [Lit (Charc 'n'),Comb ConsCall ("Prelude",":") [Lit (Charc 's'),Comb ConsCall ("Prelude",":") [Lit (Charc 't'),Comb ConsCall ("Prelude",":") [Lit (Charc 'a'),Comb ConsCall ("Prelude",":") [Lit (Charc 'n'),Comb ConsCall ("Prelude",":") [Lit (Charc 'c'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude",":") [Lit (Charc 'o'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude",":") [Lit (Charc 'd'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc 'f'),Comb ConsCall ("Prelude",":") [Lit (Charc 'a'),Comb ConsCall ("Prelude",":") [Lit (Charc 'u'),Comb ConsCall ("Prelude",":") [Lit (Charc 'l'),Comb ConsCall ("Prelude",":") [Lit (Charc 't'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude",":") [Lit (Charc 'm'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc 't'),Comb ConsCall ("Prelude",":") [Lit (Charc 'h'),Comb ConsCall ("Prelude",":") [Lit (Charc 'o'),Comb ConsCall ("Prelude",":") [Lit (Charc 'd'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude",":") [Lit (Charc 'f'),Comb ConsCall ("Prelude",":") [Lit (Charc 'o'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude",":") [Lit (Charc 'c'),Comb ConsCall ("Prelude",":") [Lit (Charc 'l'),Comb ConsCall ("Prelude",":") [Lit (Charc 'a'),Comb ConsCall ("Prelude",":") [Lit (Charc 's'),Comb ConsCall ("Prelude",":") [Lit (Charc 's'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude",":") [Lit (Charc 'o'),Comb ConsCall ("Prelude",":") [Lit (Charc 'p'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude",":") [Lit (Charc 'a'),Comb ConsCall ("Prelude",":") [Lit (Charc 't'),Comb ConsCall ("Prelude",":") [Lit (Charc 'i'),Comb ConsCall ("Prelude",":") [Lit (Charc 'o'),Comb ConsCall ("Prelude",":") [Lit (Charc 'n'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude",":") [Lit (Charc '`'),Comb ConsCall ("Prelude",":") [Lit (Charc 'w'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude",":") [Lit (Charc 'i'),Comb ConsCall ("Prelude",":") [Lit (Charc 't'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc 'R'),Comb ConsCall ("Prelude",":") [Lit (Charc 'W'),Comb ConsCall ("Prelude",":") [Lit (Charc '\''),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]])),Func ("ReadWriteBase","_def#readListRW#ReadWriteBase.ReadWrite") 100000 Public (ForallType [(0,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("ReadWriteBase","_Dict#ReadWrite") [TVar 0])) (FuncType (TCons ("Data.Map","Map") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]))))) (Rule [1,2,3] (Case Flex (Var 3) [Branch (Pattern ("Prelude",":") [4,5]) (Case Flex (Var 4) [Branch (LPattern (Charc '0')) (Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Prelude","[]") [],Var 5]),Branch (LPattern (Charc '1')) (Let [(6,Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("ReadWriteBase","readRW") [Var 1],Var 2],Var 5]),(7,Comb FuncCall ("ReadWriteBase","_def#readListRW#ReadWriteBase.ReadWrite._#selFP5#x") [Var 6]),(8,Comb FuncCall ("ReadWriteBase","_def#readListRW#ReadWriteBase.ReadWrite._#selFP6#r1") [Var 6]),(9,Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("ReadWriteBase","readListRW") [Var 1],Var 2],Var 8]),(10,Comb FuncCall ("ReadWriteBase","_def#readListRW#ReadWriteBase.ReadWrite._#selFP3#xs") [Var 9]),(11,Comb FuncCall ("ReadWriteBase","_def#readListRW#ReadWriteBase.ReadWrite._#selFP4#r2") [Var 9])] (Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Prelude",":") [Var 7,Var 10],Var 11]))])])),Func ("ReadWriteBase","_def#readListRW#ReadWriteBase.ReadWrite._#selFP5#x") 100000 Private (ForallType [(0,KStar)] (FuncType (TCons ("Prelude","(,)") [TVar 0,TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TVar 0))) (Rule [1] (Case Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Var 2)])),Func ("ReadWriteBase","_def#readListRW#ReadWriteBase.ReadWrite._#selFP6#r1") 100000 Private (ForallType [(0,KStar)] (FuncType (TCons ("Prelude","(,)") [TVar 0,TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (Rule [1] (Case Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Var 3)])),Func ("ReadWriteBase","_def#readListRW#ReadWriteBase.ReadWrite._#selFP3#xs") 100000 Private (ForallType [(0,KStar)] (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","[]") [TVar 0]))) (Rule [1] (Case Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Var 2)])),Func ("ReadWriteBase","_def#readListRW#ReadWriteBase.ReadWrite._#selFP4#r2") 100000 Private (ForallType [(0,KStar)] (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (Rule [1] (Case Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Var 3)])),Func ("ReadWriteBase","_def#showListRW#ReadWriteBase.ReadWrite") 100000 Public (ForallType [(0,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("ReadWriteBase","_Dict#ReadWrite") [TVar 0])) (FuncType (TCons ("Data.Map","Map") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","(,)") [TCons ("Data.Map","Map") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])]))))) (Rule [1,2,3] (Case Flex (Var 3) [Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude","(,)") [Var 2,Comb (FuncPartCall 1) ("Prelude","showString") [Comb ConsCall ("Prelude",":") [Lit (Charc '0'),Comb ConsCall ("Prelude","[]") []]]]),Branch (Pattern ("Prelude",":") [4,5]) (Let [(6,Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("ReadWriteBase","showRW") [Var 1],Var 2],Var 4]),(7,Comb FuncCall ("ReadWriteBase","_def#showListRW#ReadWriteBase.ReadWrite._#selFP11#strs'") [Var 6]),(8,Comb FuncCall ("ReadWriteBase","_def#showListRW#ReadWriteBase.ReadWrite._#selFP12#x'") [Var 6]),(9,Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("ReadWriteBase","showListRW") [Var 1],Var 7],Var 5]),(10,Comb FuncCall ("ReadWriteBase","_def#showListRW#ReadWriteBase.ReadWrite._#selFP9#strs''") [Var 9]),(11,Comb FuncCall ("ReadWriteBase","_def#showListRW#ReadWriteBase.ReadWrite._#selFP10#xs'") [Var 9])] (Comb ConsCall ("Prelude","(,)") [Var 10,Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","showString") [Comb ConsCall ("Prelude",":") [Lit (Charc '1'),Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("Prelude",".") [Var 8,Var 11]]]))])),Func ("ReadWriteBase","_def#showListRW#ReadWriteBase.ReadWrite._#selFP11#strs'") 100000 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Data.Map","Map") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])]) (TCons ("Data.Map","Map") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]])) (Rule [1] (Case Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Var 2)])),Func ("ReadWriteBase","_def#showListRW#ReadWriteBase.ReadWrite._#selFP12#x'") 100000 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Data.Map","Map") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (Rule [1] (Case Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Var 3)])),Func ("ReadWriteBase","_def#showListRW#ReadWriteBase.ReadWrite._#selFP9#strs''") 100000 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Data.Map","Map") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])]) (TCons ("Data.Map","Map") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]])) (Rule [1] (Case Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Var 2)])),Func ("ReadWriteBase","_def#showListRW#ReadWriteBase.ReadWrite._#selFP10#xs'") 100000 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Data.Map","Map") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (Rule [1] (Case Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Var 3)])),Func ("ReadWriteBase","_def#writeListRW#ReadWriteBase.ReadWrite") 4 Public (ForallType [(0,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("ReadWriteBase","_Dict#ReadWrite") [TVar 0])) (FuncType (TCons ("System.IO","Handle") []) (FuncType (TCons ("Prelude","[]") [TVar 0]) (FuncType (TCons ("Data.Map","Map") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","IO") [TCons ("Data.Map","Map") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))))) (Rule [1,2,3,4] (Case Flex (Var 3) [Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#>>#Prelude.Monad#Prelude.IO") [],Comb FuncCall ("System.IO","hPutStr") [Var 2,Comb ConsCall ("Prelude",":") [Lit (Charc '0'),Comb ConsCall ("Prelude","[]") []]]],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#return#Prelude.Monad#Prelude.IO") [],Var 4]]),Branch (Pattern ("Prelude",":") [5,6]) (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#>>=#Prelude.Monad#Prelude.IO") [],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#>>#Prelude.Monad#Prelude.IO") [],Comb FuncCall ("System.IO","hPutStr") [Var 2,Comb ConsCall ("Prelude",":") [Lit (Charc '1'),Comb ConsCall ("Prelude","[]") []]]],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("ReadWriteBase","writeRW") [Var 1],Var 2],Var 5],Var 4]]],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("ReadWriteBase","writeListRW") [Var 1],Var 2],Var 6]])])),Func ("ReadWriteBase","_inst#ReadWriteBase.ReadWrite#Prelude.Int") 100000 Public (FuncType (TCons ("Prelude","()") []) (TCons ("ReadWriteBase","_Dict#ReadWrite") [TCons ("Prelude","Int") []])) (Rule [1] (Case Flex (Var 1) [Branch (Pattern ("Prelude","()") []) (Comb ConsCall ("ReadWriteBase","_Dict#ReadWrite") [Comb (FuncPartCall 2) ("ReadWriteBase","_impl#readRW#ReadWriteBase.ReadWrite#Prelude.Int") [],Comb (FuncPartCall 2) ("ReadWriteBase","_impl#showRW#ReadWriteBase.ReadWrite#Prelude.Int") [],Comb (FuncPartCall 1) ("ReadWriteBase","_impl#showType#ReadWriteBase.ReadWrite#Prelude.Int") [],Comb (FuncPartCall 3) ("ReadWriteBase","_impl#writeRW#ReadWriteBase.ReadWrite#Prelude.Int") [],Comb FuncCall ("ReadWriteBase","_impl#readListRW#ReadWriteBase.ReadWrite#Prelude.Int") [],Comb FuncCall ("ReadWriteBase","_impl#showListRW#ReadWriteBase.ReadWrite#Prelude.Int") [],Comb FuncCall ("ReadWriteBase","_impl#writeListRW#ReadWriteBase.ReadWrite#Prelude.Int") []])])),Func ("ReadWriteBase","_impl#readRW#ReadWriteBase.ReadWrite#Prelude.Int") 100000 Public (FuncType (TCons ("Data.Map","Map") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]))) (Rule [1,2] (Let [(3,Comb FuncCall ("Prelude","span") [Comb (FuncPartCall 1) ("Prelude","flip") [Comb FuncCall ("Prelude","_impl#/=#Prelude.Eq#Prelude.Char") [],Lit (Charc ';')],Var 2]),(4,Comb FuncCall ("ReadWriteBase","_impl#readRW#ReadWriteBase.ReadWrite#Prelude.Int._#selFP14#n") [Var 3]),(5,Comb FuncCall ("ReadWriteBase","_impl#readRW#ReadWriteBase.ReadWrite#Prelude.Int._#selFP15#r") [Var 3])] (Comb ConsCall ("Prelude","(,)") [Comb FuncCall ("Prelude","read") [Comb (FuncPartCall 1) ("Prelude","_inst#Prelude.Read#Prelude.Int") [],Var 4],Var 5]))),Func ("ReadWriteBase","_impl#readRW#ReadWriteBase.ReadWrite#Prelude.Int._#selFP14#n") 100000 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [1] (Case Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Case Flex (Var 3) [Branch (Pattern ("Prelude",":") [4,5]) (Var 2)])])),Func ("ReadWriteBase","_impl#readRW#ReadWriteBase.ReadWrite#Prelude.Int._#selFP15#r") 100000 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [1] (Case Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Case Flex (Var 3) [Branch (Pattern ("Prelude",":") [4,5]) (Var 5)])])),Func ("ReadWriteBase","_impl#showRW#ReadWriteBase.ReadWrite#Prelude.Int") 100000 Public (FuncType (TCons ("Data.Map","Map") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","(,)") [TCons ("Data.Map","Map") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])]))) (Rule [1,2] (Comb ConsCall ("Prelude","(,)") [Var 1,Comb FuncCall ("Prelude",".") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","shows") [Comb (FuncPartCall 1) ("Prelude","_inst#Prelude.Show#Prelude.Int") []],Var 2],Comb (FuncPartCall 1) ("Prelude","showString") [Comb ConsCall ("Prelude",":") [Lit (Charc ';'),Comb ConsCall ("Prelude","[]") []]]]])),Func ("ReadWriteBase","_impl#showType#ReadWriteBase.ReadWrite#Prelude.Int") 100000 Public (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [1] (Comb ConsCall ("Prelude",":") [Lit (Charc 'I'),Comb ConsCall ("Prelude",":") [Lit (Charc 'n'),Comb ConsCall ("Prelude",":") [Lit (Charc 't'),Comb ConsCall ("Prelude","[]") []]]])),Func ("ReadWriteBase","_impl#writeRW#ReadWriteBase.ReadWrite#Prelude.Int") 100000 Public (FuncType (TCons ("System.IO","Handle") []) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Data.Map","Map") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","IO") [TCons ("Data.Map","Map") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [1,2,3] (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#>>#Prelude.Monad#Prelude.IO") [],Comb FuncCall ("System.IO","hPutStr") [Var 1,Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#show#Prelude.Show#Prelude.Int") [],Var 2],Comb ConsCall ("Prelude",":") [Lit (Charc ';'),Comb ConsCall ("Prelude","[]") []]]]],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#return#Prelude.Monad#Prelude.IO") [],Var 3]])),Func ("ReadWriteBase","_impl#readListRW#ReadWriteBase.ReadWrite#Prelude.Int") 0 Public (FuncType (TCons ("Data.Map","Map") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Int") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]))) (Rule [] (Comb (FuncPartCall 2) ("ReadWriteBase","_def#readListRW#ReadWriteBase.ReadWrite") [Comb (FuncPartCall 1) ("ReadWriteBase","_inst#ReadWriteBase.ReadWrite#Prelude.Int") []])),Func ("ReadWriteBase","_impl#showListRW#ReadWriteBase.ReadWrite#Prelude.Int") 0 Public (FuncType (TCons ("Data.Map","Map") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]) (TCons ("Prelude","(,)") [TCons ("Data.Map","Map") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])]))) (Rule [] (Comb (FuncPartCall 2) ("ReadWriteBase","_def#showListRW#ReadWriteBase.ReadWrite") [Comb (FuncPartCall 1) ("ReadWriteBase","_inst#ReadWriteBase.ReadWrite#Prelude.Int") []])),Func ("ReadWriteBase","_impl#writeListRW#ReadWriteBase.ReadWrite#Prelude.Int") 0 Public (FuncType (TCons ("System.IO","Handle") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]) (FuncType (TCons ("Data.Map","Map") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","IO") [TCons ("Data.Map","Map") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [] (Comb (FuncPartCall 3) ("ReadWriteBase","_def#writeListRW#ReadWriteBase.ReadWrite") [Comb (FuncPartCall 1) ("ReadWriteBase","_inst#ReadWriteBase.ReadWrite#Prelude.Int") []])),Func ("ReadWriteBase","_inst#ReadWriteBase.ReadWrite#Prelude.Float") 100000 Public (FuncType (TCons ("Prelude","()") []) (TCons ("ReadWriteBase","_Dict#ReadWrite") [TCons ("Prelude","Float") []])) (Rule [1] (Case Flex (Var 1) [Branch (Pattern ("Prelude","()") []) (Comb ConsCall ("ReadWriteBase","_Dict#ReadWrite") [Comb (FuncPartCall 2) ("ReadWriteBase","_impl#readRW#ReadWriteBase.ReadWrite#Prelude.Float") [],Comb (FuncPartCall 2) ("ReadWriteBase","_impl#showRW#ReadWriteBase.ReadWrite#Prelude.Float") [],Comb (FuncPartCall 1) ("ReadWriteBase","_impl#showType#ReadWriteBase.ReadWrite#Prelude.Float") [],Comb (FuncPartCall 3) ("ReadWriteBase","_impl#writeRW#ReadWriteBase.ReadWrite#Prelude.Float") [],Comb FuncCall ("ReadWriteBase","_impl#readListRW#ReadWriteBase.ReadWrite#Prelude.Float") [],Comb FuncCall ("ReadWriteBase","_impl#showListRW#ReadWriteBase.ReadWrite#Prelude.Float") [],Comb FuncCall ("ReadWriteBase","_impl#writeListRW#ReadWriteBase.ReadWrite#Prelude.Float") []])])),Func ("ReadWriteBase","_impl#readRW#ReadWriteBase.ReadWrite#Prelude.Float") 100000 Public (FuncType (TCons ("Data.Map","Map") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","(,)") [TCons ("Prelude","Float") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]))) (Rule [1,2] (Let [(3,Comb FuncCall ("Prelude","span") [Comb (FuncPartCall 1) ("Prelude","flip") [Comb FuncCall ("Prelude","_impl#/=#Prelude.Eq#Prelude.Char") [],Lit (Charc ';')],Var 2]),(4,Comb FuncCall ("ReadWriteBase","_impl#readRW#ReadWriteBase.ReadWrite#Prelude.Float._#selFP17#n") [Var 3]),(5,Comb FuncCall ("ReadWriteBase","_impl#readRW#ReadWriteBase.ReadWrite#Prelude.Float._#selFP18#r") [Var 3])] (Comb ConsCall ("Prelude","(,)") [Comb FuncCall ("Prelude","read") [Comb (FuncPartCall 1) ("Prelude","_inst#Prelude.Read#Prelude.Float") [],Var 4],Var 5]))),Func ("ReadWriteBase","_impl#readRW#ReadWriteBase.ReadWrite#Prelude.Float._#selFP17#n") 100000 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [1] (Case Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Case Flex (Var 3) [Branch (Pattern ("Prelude",":") [4,5]) (Var 2)])])),Func ("ReadWriteBase","_impl#readRW#ReadWriteBase.ReadWrite#Prelude.Float._#selFP18#r") 100000 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [1] (Case Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Case Flex (Var 3) [Branch (Pattern ("Prelude",":") [4,5]) (Var 5)])])),Func ("ReadWriteBase","_impl#showRW#ReadWriteBase.ReadWrite#Prelude.Float") 100000 Public (FuncType (TCons ("Data.Map","Map") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","Float") []) (TCons ("Prelude","(,)") [TCons ("Data.Map","Map") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])]))) (Rule [1,2] (Comb ConsCall ("Prelude","(,)") [Var 1,Comb FuncCall ("Prelude",".") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","shows") [Comb (FuncPartCall 1) ("Prelude","_inst#Prelude.Show#Prelude.Float") []],Var 2],Comb (FuncPartCall 1) ("Prelude","showString") [Comb ConsCall ("Prelude",":") [Lit (Charc ';'),Comb ConsCall ("Prelude","[]") []]]]])),Func ("ReadWriteBase","_impl#showType#ReadWriteBase.ReadWrite#Prelude.Float") 100000 Public (FuncType (TCons ("Prelude","Float") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [1] (Comb ConsCall ("Prelude",":") [Lit (Charc 'F'),Comb ConsCall ("Prelude",":") [Lit (Charc 'l'),Comb ConsCall ("Prelude",":") [Lit (Charc 'o'),Comb ConsCall ("Prelude",":") [Lit (Charc 'a'),Comb ConsCall ("Prelude",":") [Lit (Charc 't'),Comb ConsCall ("Prelude","[]") []]]]]])),Func ("ReadWriteBase","_impl#writeRW#ReadWriteBase.ReadWrite#Prelude.Float") 100000 Public (FuncType (TCons ("System.IO","Handle") []) (FuncType (TCons ("Prelude","Float") []) (FuncType (TCons ("Data.Map","Map") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","IO") [TCons ("Data.Map","Map") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [1,2,3] (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#>>#Prelude.Monad#Prelude.IO") [],Comb FuncCall ("System.IO","hPutStr") [Var 1,Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#show#Prelude.Show#Prelude.Float") [],Var 2],Comb ConsCall ("Prelude",":") [Lit (Charc ';'),Comb ConsCall ("Prelude","[]") []]]]],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#return#Prelude.Monad#Prelude.IO") [],Var 3]])),Func ("ReadWriteBase","_impl#readListRW#ReadWriteBase.ReadWrite#Prelude.Float") 0 Public (FuncType (TCons ("Data.Map","Map") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Float") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]))) (Rule [] (Comb (FuncPartCall 2) ("ReadWriteBase","_def#readListRW#ReadWriteBase.ReadWrite") [Comb (FuncPartCall 1) ("ReadWriteBase","_inst#ReadWriteBase.ReadWrite#Prelude.Float") []])),Func ("ReadWriteBase","_impl#showListRW#ReadWriteBase.ReadWrite#Prelude.Float") 0 Public (FuncType (TCons ("Data.Map","Map") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Float") []]) (TCons ("Prelude","(,)") [TCons ("Data.Map","Map") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])]))) (Rule [] (Comb (FuncPartCall 2) ("ReadWriteBase","_def#showListRW#ReadWriteBase.ReadWrite") [Comb (FuncPartCall 1) ("ReadWriteBase","_inst#ReadWriteBase.ReadWrite#Prelude.Float") []])),Func ("ReadWriteBase","_impl#writeListRW#ReadWriteBase.ReadWrite#Prelude.Float") 0 Public (FuncType (TCons ("System.IO","Handle") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Float") []]) (FuncType (TCons ("Data.Map","Map") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","IO") [TCons ("Data.Map","Map") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [] (Comb (FuncPartCall 3) ("ReadWriteBase","_def#writeListRW#ReadWriteBase.ReadWrite") [Comb (FuncPartCall 1) ("ReadWriteBase","_inst#ReadWriteBase.ReadWrite#Prelude.Float") []])),Func ("ReadWriteBase","_inst#ReadWriteBase.ReadWrite#[]") 100000 Public (ForallType [(0,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("ReadWriteBase","_Dict#ReadWrite") [TVar 0])) (FuncType (TCons ("Prelude","()") []) (TCons ("ReadWriteBase","_Dict#ReadWrite") [TCons ("Prelude","[]") [TVar 0]])))) (Rule [1,2] (Case Flex (Var 2) [Branch (Pattern ("Prelude","()") []) (Comb ConsCall ("ReadWriteBase","_Dict#ReadWrite") [Comb FuncCall ("ReadWriteBase","_impl#readRW#ReadWriteBase.ReadWrite#[]") [Var 1],Comb FuncCall ("ReadWriteBase","_impl#showRW#ReadWriteBase.ReadWrite#[]") [Var 1],Comb (FuncPartCall 1) ("ReadWriteBase","_impl#showType#ReadWriteBase.ReadWrite#[]") [Var 1],Comb FuncCall ("ReadWriteBase","_impl#writeRW#ReadWriteBase.ReadWrite#[]") [Var 1],Comb FuncCall ("ReadWriteBase","_impl#readListRW#ReadWriteBase.ReadWrite#[]") [Var 1],Comb FuncCall ("ReadWriteBase","_impl#showListRW#ReadWriteBase.ReadWrite#[]") [Var 1],Comb FuncCall ("ReadWriteBase","_impl#writeListRW#ReadWriteBase.ReadWrite#[]") [Var 1]])])),Func ("ReadWriteBase","_impl#readRW#ReadWriteBase.ReadWrite#[]") 100000 Public (ForallType [(0,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("ReadWriteBase","_Dict#ReadWrite") [TVar 0])) (FuncType (TCons ("Data.Map","Map") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]))))) (Rule [1] (Comb FuncCall ("ReadWriteBase","readListRW") [Var 1])),Func ("ReadWriteBase","_impl#showRW#ReadWriteBase.ReadWrite#[]") 100000 Public (ForallType [(0,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("ReadWriteBase","_Dict#ReadWrite") [TVar 0])) (FuncType (TCons ("Data.Map","Map") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","(,)") [TCons ("Data.Map","Map") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])]))))) (Rule [1] (Comb FuncCall ("ReadWriteBase","showListRW") [Var 1])),Func ("ReadWriteBase","_impl#showType#ReadWriteBase.ReadWrite#[]") 100000 Public (ForallType [(0,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("ReadWriteBase","_Dict#ReadWrite") [TVar 0])) (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])))) (Rule [1,2] (Comb ConsCall ("Prelude",":") [Lit (Charc 'L'),Comb ConsCall ("Prelude",":") [Lit (Charc 'i'),Comb ConsCall ("Prelude",":") [Lit (Charc 's'),Comb ConsCall ("Prelude",":") [Lit (Charc 't'),Comb ConsCall ("Prelude","[]") []]]]])),Func ("ReadWriteBase","_impl#writeRW#ReadWriteBase.ReadWrite#[]") 100000 Public (ForallType [(0,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("ReadWriteBase","_Dict#ReadWrite") [TVar 0])) (FuncType (TCons ("System.IO","Handle") []) (FuncType (TCons ("Prelude","[]") [TVar 0]) (FuncType (TCons ("Data.Map","Map") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","IO") [TCons ("Data.Map","Map") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))))) (Rule [1] (Comb FuncCall ("ReadWriteBase","writeListRW") [Var 1])),Func ("ReadWriteBase","_impl#readListRW#ReadWriteBase.ReadWrite#[]") 100000 Public (ForallType [(0,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("ReadWriteBase","_Dict#ReadWrite") [TVar 0])) (FuncType (TCons ("Data.Map","Map") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","[]") [TVar 0]],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]))))) (Rule [1] (Comb (FuncPartCall 2) ("ReadWriteBase","_def#readListRW#ReadWriteBase.ReadWrite") [Comb (FuncPartCall 1) ("ReadWriteBase","_inst#ReadWriteBase.ReadWrite#[]") [Var 1]])),Func ("ReadWriteBase","_impl#showListRW#ReadWriteBase.ReadWrite#[]") 100000 Public (ForallType [(0,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("ReadWriteBase","_Dict#ReadWrite") [TVar 0])) (FuncType (TCons ("Data.Map","Map") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","[]") [TVar 0]]) (TCons ("Prelude","(,)") [TCons ("Data.Map","Map") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])]))))) (Rule [1] (Comb (FuncPartCall 2) ("ReadWriteBase","_def#showListRW#ReadWriteBase.ReadWrite") [Comb (FuncPartCall 1) ("ReadWriteBase","_inst#ReadWriteBase.ReadWrite#[]") [Var 1]])),Func ("ReadWriteBase","_impl#writeListRW#ReadWriteBase.ReadWrite#[]") 100000 Public (ForallType [(0,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("ReadWriteBase","_Dict#ReadWrite") [TVar 0])) (FuncType (TCons ("System.IO","Handle") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","[]") [TVar 0]]) (FuncType (TCons ("Data.Map","Map") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","IO") [TCons ("Data.Map","Map") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))))) (Rule [1] (Comb (FuncPartCall 3) ("ReadWriteBase","_def#writeListRW#ReadWriteBase.ReadWrite") [Comb (FuncPartCall 1) ("ReadWriteBase","_inst#ReadWriteBase.ReadWrite#[]") [Var 1]])),Func ("ReadWriteBase","_inst#ReadWriteBase.ReadWrite#Prelude.Char") 100000 Public (FuncType (TCons ("Prelude","()") []) (TCons ("ReadWriteBase","_Dict#ReadWrite") [TCons ("Prelude","Char") []])) (Rule [1] (Case Flex (Var 1) [Branch (Pattern ("Prelude","()") []) (Comb ConsCall ("ReadWriteBase","_Dict#ReadWrite") [Comb (FuncPartCall 2) ("ReadWriteBase","_impl#readRW#ReadWriteBase.ReadWrite#Prelude.Char") [],Comb (FuncPartCall 2) ("ReadWriteBase","_impl#showRW#ReadWriteBase.ReadWrite#Prelude.Char") [],Comb (FuncPartCall 1) ("ReadWriteBase","_impl#showType#ReadWriteBase.ReadWrite#Prelude.Char") [],Comb (FuncPartCall 3) ("ReadWriteBase","_impl#writeRW#ReadWriteBase.ReadWrite#Prelude.Char") [],Comb (FuncPartCall 2) ("ReadWriteBase","_impl#readListRW#ReadWriteBase.ReadWrite#Prelude.Char") [],Comb (FuncPartCall 2) ("ReadWriteBase","_impl#showListRW#ReadWriteBase.ReadWrite#Prelude.Char") [],Comb (FuncPartCall 3) ("ReadWriteBase","_impl#writeListRW#ReadWriteBase.ReadWrite#Prelude.Char") []])])),Func ("ReadWriteBase","_impl#readRW#ReadWriteBase.ReadWrite#Prelude.Char") 100000 Public (FuncType (TCons ("Data.Map","Map") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","(,)") [TCons ("Prelude","Char") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]))) (Rule [1,2] (Case Flex (Var 2) [Branch (Pattern ("Prelude",":") [3,4]) (Case Rigid (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#/=#Prelude.Eq#Prelude.Char") [],Var 3],Lit (Charc '\\')]) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude","(,)") [Var 3,Var 4]),Branch (Pattern ("Prelude","False") []) (Case Rigid (Comb FuncCall ("Prelude","otherwise") []) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 4) [Branch (Pattern ("Prelude",":") [5,6]) (Case Rigid (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#===#Prelude.Data#Prelude.Char") [],Var 5],Lit (Charc '"')]) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude","(,)") [Lit (Charc '"'),Var 6]),Branch (Pattern ("Prelude","False") []) (Case Rigid (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#===#Prelude.Data#Prelude.Char") [],Var 5],Lit (Charc 'a')]) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude","(,)") [Lit (Charc '\a'),Var 6]),Branch (Pattern ("Prelude","False") []) (Case Rigid (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#===#Prelude.Data#Prelude.Char") [],Var 5],Lit (Charc 'b')]) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude","(,)") [Lit (Charc '\b'),Var 6]),Branch (Pattern ("Prelude","False") []) (Case Rigid (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#===#Prelude.Data#Prelude.Char") [],Var 5],Lit (Charc 't')]) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude","(,)") [Lit (Charc '\t'),Var 6]),Branch (Pattern ("Prelude","False") []) (Case Rigid (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#===#Prelude.Data#Prelude.Char") [],Var 5],Lit (Charc 'n')]) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude","(,)") [Lit (Charc '\n'),Var 6]),Branch (Pattern ("Prelude","False") []) (Case Rigid (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#===#Prelude.Data#Prelude.Char") [],Var 5],Lit (Charc 'v')]) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude","(,)") [Lit (Charc '\v'),Var 6]),Branch (Pattern ("Prelude","False") []) (Case Rigid (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#===#Prelude.Data#Prelude.Char") [],Var 5],Lit (Charc 'f')]) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude","(,)") [Lit (Charc '\f'),Var 6]),Branch (Pattern ("Prelude","False") []) (Case Rigid (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#===#Prelude.Data#Prelude.Char") [],Var 5],Lit (Charc 'r')]) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude","(,)") [Lit (Charc '\r'),Var 6]),Branch (Pattern ("Prelude","False") []) (Case Rigid (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#===#Prelude.Data#Prelude.Char") [],Var 5],Lit (Charc '\\')]) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude","(,)") [Lit (Charc '\\'),Var 6]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","error") [Comb ConsCall ("Prelude",":") [Lit (Charc 'I'),Comb ConsCall ("Prelude",":") [Lit (Charc 'n'),Comb ConsCall ("Prelude",":") [Lit (Charc 'v'),Comb ConsCall ("Prelude",":") [Lit (Charc 'a'),Comb ConsCall ("Prelude",":") [Lit (Charc 'l'),Comb ConsCall ("Prelude",":") [Lit (Charc 'i'),Comb ConsCall ("Prelude",":") [Lit (Charc 'd'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc 's'),Comb ConsCall ("Prelude",":") [Lit (Charc 'c'),Comb ConsCall ("Prelude",":") [Lit (Charc 'a'),Comb ConsCall ("Prelude",":") [Lit (Charc 'p'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude",":") [Lit (Charc 's'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc 'q'),Comb ConsCall ("Prelude",":") [Lit (Charc 'u'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc 'n'),Comb ConsCall ("Prelude",":") [Lit (Charc 'c'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]]]]]]]]]]]]])])])])])])])])])]),Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("Prelude","error") [Comb ConsCall ("Prelude",":") [Lit (Charc 'I'),Comb ConsCall ("Prelude",":") [Lit (Charc 'n'),Comb ConsCall ("Prelude",":") [Lit (Charc 'v'),Comb ConsCall ("Prelude",":") [Lit (Charc 'a'),Comb ConsCall ("Prelude",":") [Lit (Charc 'l'),Comb ConsCall ("Prelude",":") [Lit (Charc 'i'),Comb ConsCall ("Prelude",":") [Lit (Charc 'd'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc 's'),Comb ConsCall ("Prelude",":") [Lit (Charc 'c'),Comb ConsCall ("Prelude",":") [Lit (Charc 'a'),Comb ConsCall ("Prelude",":") [Lit (Charc 'p'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude",":") [Lit (Charc 's'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc 'q'),Comb ConsCall ("Prelude",":") [Lit (Charc 'u'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc 'n'),Comb ConsCall ("Prelude",":") [Lit (Charc 'c'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]]]]]]]]]]]]])]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","failed") [])])])])),Func ("ReadWriteBase","_impl#showRW#ReadWriteBase.ReadWrite#Prelude.Char") 100000 Public (FuncType (TCons ("Data.Map","Map") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","Char") []) (TCons ("Prelude","(,)") [TCons ("Data.Map","Map") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])]))) (Rule [1,2] (Comb ConsCall ("Prelude","(,)") [Var 1,Comb FuncCall ("Prelude","$") [Comb (FuncPartCall 2) ("Prelude","showString") [],Comb FuncCall ("ReadWriteBase","escapeChar") [Var 2]]])),Func ("ReadWriteBase","_impl#showType#ReadWriteBase.ReadWrite#Prelude.Char") 100000 Public (FuncType (TCons ("Prelude","Char") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [1] (Comb ConsCall ("Prelude",":") [Lit (Charc 'C'),Comb ConsCall ("Prelude",":") [Lit (Charc 'h'),Comb ConsCall ("Prelude",":") [Lit (Charc 'a'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude","[]") []]]]])),Func ("ReadWriteBase","_impl#writeRW#ReadWriteBase.ReadWrite#Prelude.Char") 100000 Public (FuncType (TCons ("System.IO","Handle") []) (FuncType (TCons ("Prelude","Char") []) (FuncType (TCons ("Data.Map","Map") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","IO") [TCons ("Data.Map","Map") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [1,2,3] (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#>>#Prelude.Monad#Prelude.IO") [],Comb FuncCall ("System.IO","hPutStr") [Var 1,Comb FuncCall ("ReadWriteBase","escapeChar") [Var 2]]],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#return#Prelude.Monad#Prelude.IO") [],Var 3]])),Func ("ReadWriteBase","_impl#readListRW#ReadWriteBase.ReadWrite#Prelude.Char") 100000 Public (FuncType (TCons ("Data.Map","Map") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]))) (Rule [1,2] (Let [(3,Typed (Comb FuncCall ("ReadWriteBase","readStringId") [Var 1,Var 2]) (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]])),(4,Comb FuncCall ("ReadWriteBase","_impl#readListRW#ReadWriteBase.ReadWrite#Prelude.Char._#selFP23#index") [Var 3]),(5,Comb FuncCall ("ReadWriteBase","_impl#readListRW#ReadWriteBase.ReadWrite#Prelude.Char._#selFP24#r") [Var 3])] (Case Rigid (Var 4) [Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("ReadWriteBase","_impl#readListRW#ReadWriteBase.ReadWrite#Prelude.Char.readStubString.183") [Var 1,Var 5]),Branch (Pattern ("Prelude",":") [6,7]) (Comb ConsCall ("Prelude","(,)") [Comb FuncCall ("Prelude","$") [Comb (FuncPartCall 1) ("Data.Maybe","fromJust") [],Comb FuncCall ("Data.Map","lookup") [Comb (FuncPartCall 1) ("Prelude","_inst#Prelude.Ord#[]") [Comb (FuncPartCall 1) ("Prelude","_inst#Prelude.Ord#Prelude.Char") []],Var 4,Var 1]],Var 5])]))),Func ("ReadWriteBase","_impl#readListRW#ReadWriteBase.ReadWrite#Prelude.Char._#selFP23#index") 100000 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [1] (Case Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Var 2)])),Func ("ReadWriteBase","_impl#readListRW#ReadWriteBase.ReadWrite#Prelude.Char._#selFP24#r") 100000 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [1] (Case Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Var 3)])),Func ("ReadWriteBase","_impl#readListRW#ReadWriteBase.ReadWrite#Prelude.Char.readStubString.183") 100000 Private (ForallType [(0,KStar)] (FuncType (TVar 0) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]])))) (Rule [1,2] (Let [(3,Comb FuncCall ("Prelude","span") [Comb (FuncPartCall 1) ("Prelude","flip") [Comb FuncCall ("Prelude","_impl#/=#Prelude.Eq#Prelude.Char") [],Lit (Charc '"')],Var 2]),(4,Comb FuncCall ("ReadWriteBase","_impl#readListRW#ReadWriteBase.ReadWrite#Prelude.Char.readStubString.183._#selFP21#str") [Var 3]),(5,Comb FuncCall ("ReadWriteBase","_impl#readListRW#ReadWriteBase.ReadWrite#Prelude.Char.readStubString.183._#selFP22#cs'") [Var 3])] (Comb ConsCall ("Prelude","(,)") [Var 4,Var 5]))),Func ("ReadWriteBase","_impl#readListRW#ReadWriteBase.ReadWrite#Prelude.Char.readStubString.183._#selFP21#str") 100000 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [1] (Case Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Case Flex (Var 3) [Branch (Pattern ("Prelude",":") [4,5]) (Var 2)])])),Func ("ReadWriteBase","_impl#readListRW#ReadWriteBase.ReadWrite#Prelude.Char.readStubString.183._#selFP22#cs'") 100000 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [1] (Case Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Case Flex (Var 3) [Branch (Pattern ("Prelude",":") [4,5]) (Var 5)])])),Func ("ReadWriteBase","_impl#showListRW#ReadWriteBase.ReadWrite#Prelude.Char") 100000 Public (FuncType (TCons ("Data.Map","Map") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","(,)") [TCons ("Data.Map","Map") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])]))) (Rule [1,2] (Let [(3,Comb FuncCall ("ReadWriteBase","writeString") [Var 1,Var 2]),(4,Comb FuncCall ("ReadWriteBase","_impl#showListRW#ReadWriteBase.ReadWrite#Prelude.Char._#selFP26#strs'") [Var 3]),(5,Comb FuncCall ("ReadWriteBase","_impl#showListRW#ReadWriteBase.ReadWrite#Prelude.Char._#selFP27#index") [Var 3])] (Comb ConsCall ("Prelude","(,)") [Var 4,Var 5]))),Func ("ReadWriteBase","_impl#showListRW#ReadWriteBase.ReadWrite#Prelude.Char._#selFP26#strs'") 100000 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Data.Map","Map") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])]) (TCons ("Data.Map","Map") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]])) (Rule [1] (Case Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Var 2)])),Func ("ReadWriteBase","_impl#showListRW#ReadWriteBase.ReadWrite#Prelude.Char._#selFP27#index") 100000 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Data.Map","Map") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (Rule [1] (Case Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Var 3)])),Func ("ReadWriteBase","_impl#writeListRW#ReadWriteBase.ReadWrite#Prelude.Char") 100000 Public (FuncType (TCons ("System.IO","Handle") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Data.Map","Map") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","IO") [TCons ("Data.Map","Map") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [1,2,3] (Let [(4,Comb FuncCall ("ReadWriteBase","writeString") [Var 3,Var 2]),(5,Comb FuncCall ("ReadWriteBase","_impl#writeListRW#ReadWriteBase.ReadWrite#Prelude.Char._#selFP29#strs'") [Var 4]),(6,Comb FuncCall ("ReadWriteBase","_impl#writeListRW#ReadWriteBase.ReadWrite#Prelude.Char._#selFP30#index") [Var 4])] (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#>>#Prelude.Monad#Prelude.IO") [],Comb FuncCall ("System.IO","hPutStr") [Var 1,Comb FuncCall ("Prelude","apply") [Var 6,Comb ConsCall ("Prelude","[]") []]]],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#return#Prelude.Monad#Prelude.IO") [],Var 5]]))),Func ("ReadWriteBase","_impl#writeListRW#ReadWriteBase.ReadWrite#Prelude.Char._#selFP29#strs'") 100000 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Data.Map","Map") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])]) (TCons ("Data.Map","Map") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]])) (Rule [1] (Case Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Var 2)])),Func ("ReadWriteBase","_impl#writeListRW#ReadWriteBase.ReadWrite#Prelude.Char._#selFP30#index") 100000 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Data.Map","Map") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (Rule [1] (Case Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Var 3)])),Func ("ReadWriteBase","_inst#ReadWriteBase.ReadWrite#()") 100000 Public (FuncType (TCons ("Prelude","()") []) (TCons ("ReadWriteBase","_Dict#ReadWrite") [TCons ("Prelude","()") []])) (Rule [1] (Case Flex (Var 1) [Branch (Pattern ("Prelude","()") []) (Comb ConsCall ("ReadWriteBase","_Dict#ReadWrite") [Comb (FuncPartCall 2) ("ReadWriteBase","_impl#readRW#ReadWriteBase.ReadWrite#()") [],Comb (FuncPartCall 2) ("ReadWriteBase","_impl#showRW#ReadWriteBase.ReadWrite#()") [],Comb (FuncPartCall 1) ("ReadWriteBase","_impl#showType#ReadWriteBase.ReadWrite#()") [],Comb (FuncPartCall 3) ("ReadWriteBase","_impl#writeRW#ReadWriteBase.ReadWrite#()") [],Comb FuncCall ("ReadWriteBase","_impl#readListRW#ReadWriteBase.ReadWrite#()") [],Comb FuncCall ("ReadWriteBase","_impl#showListRW#ReadWriteBase.ReadWrite#()") [],Comb FuncCall ("ReadWriteBase","_impl#writeListRW#ReadWriteBase.ReadWrite#()") []])])),Func ("ReadWriteBase","_impl#readRW#ReadWriteBase.ReadWrite#()") 100000 Public (FuncType (TCons ("Data.Map","Map") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","(,)") [TCons ("Prelude","()") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]))) (Rule [1,2] (Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Prelude","()") [],Var 2])),Func ("ReadWriteBase","_impl#showRW#ReadWriteBase.ReadWrite#()") 100000 Public (FuncType (TCons ("Data.Map","Map") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","(,)") [TCons ("Data.Map","Map") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])]))) (Rule [1,2] (Case Flex (Var 2) [Branch (Pattern ("Prelude","()") []) (Comb ConsCall ("Prelude","(,)") [Var 1,Comb (FuncPartCall 1) ("Prelude","showString") [Comb ConsCall ("Prelude","[]") []]])])),Func ("ReadWriteBase","_impl#showType#ReadWriteBase.ReadWrite#()") 100000 Public (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [1] (Comb ConsCall ("Prelude",":") [Lit (Charc '('),Comb ConsCall ("Prelude",":") [Lit (Charc ')'),Comb ConsCall ("Prelude","[]") []]])),Func ("ReadWriteBase","_impl#writeRW#ReadWriteBase.ReadWrite#()") 100000 Public (FuncType (TCons ("System.IO","Handle") []) (FuncType (TCons ("Prelude","()") []) (FuncType (TCons ("Data.Map","Map") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","IO") [TCons ("Data.Map","Map") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [1,2,3] (Case Flex (Var 2) [Branch (Pattern ("Prelude","()") []) (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#return#Prelude.Monad#Prelude.IO") [],Var 3])])),Func ("ReadWriteBase","_impl#readListRW#ReadWriteBase.ReadWrite#()") 0 Public (FuncType (TCons ("Data.Map","Map") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","()") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]))) (Rule [] (Comb (FuncPartCall 2) ("ReadWriteBase","_def#readListRW#ReadWriteBase.ReadWrite") [Comb (FuncPartCall 1) ("ReadWriteBase","_inst#ReadWriteBase.ReadWrite#()") []])),Func ("ReadWriteBase","_impl#showListRW#ReadWriteBase.ReadWrite#()") 0 Public (FuncType (TCons ("Data.Map","Map") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","()") []]) (TCons ("Prelude","(,)") [TCons ("Data.Map","Map") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])]))) (Rule [] (Comb (FuncPartCall 2) ("ReadWriteBase","_def#showListRW#ReadWriteBase.ReadWrite") [Comb (FuncPartCall 1) ("ReadWriteBase","_inst#ReadWriteBase.ReadWrite#()") []])),Func ("ReadWriteBase","_impl#writeListRW#ReadWriteBase.ReadWrite#()") 0 Public (FuncType (TCons ("System.IO","Handle") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","()") []]) (FuncType (TCons ("Data.Map","Map") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","IO") [TCons ("Data.Map","Map") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [] (Comb (FuncPartCall 3) ("ReadWriteBase","_def#writeListRW#ReadWriteBase.ReadWrite") [Comb (FuncPartCall 1) ("ReadWriteBase","_inst#ReadWriteBase.ReadWrite#()") []])),Func ("ReadWriteBase","_inst#ReadWriteBase.ReadWrite#(,)") 100000 Public (ForallType [(0,KStar),(1,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("ReadWriteBase","_Dict#ReadWrite") [TVar 1])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("ReadWriteBase","_Dict#ReadWrite") [TVar 0])) (FuncType (TCons ("Prelude","()") []) (TCons ("ReadWriteBase","_Dict#ReadWrite") [TCons ("Prelude","(,)") [TVar 1,TVar 0]]))))) (Rule [1,2,3] (Case Flex (Var 3) [Branch (Pattern ("Prelude","()") []) (Comb ConsCall ("ReadWriteBase","_Dict#ReadWrite") [Comb (FuncPartCall 2) ("ReadWriteBase","_impl#readRW#ReadWriteBase.ReadWrite#(,)") [Var 1,Var 2],Comb (FuncPartCall 2) ("ReadWriteBase","_impl#showRW#ReadWriteBase.ReadWrite#(,)") [Var 1,Var 2],Comb (FuncPartCall 1) ("ReadWriteBase","_impl#showType#ReadWriteBase.ReadWrite#(,)") [Var 1,Var 2],Comb (FuncPartCall 3) ("ReadWriteBase","_impl#writeRW#ReadWriteBase.ReadWrite#(,)") [Var 1,Var 2],Comb FuncCall ("ReadWriteBase","_impl#readListRW#ReadWriteBase.ReadWrite#(,)") [Var 1,Var 2],Comb FuncCall ("ReadWriteBase","_impl#showListRW#ReadWriteBase.ReadWrite#(,)") [Var 1,Var 2],Comb FuncCall ("ReadWriteBase","_impl#writeListRW#ReadWriteBase.ReadWrite#(,)") [Var 1,Var 2]])])),Func ("ReadWriteBase","_impl#readRW#ReadWriteBase.ReadWrite#(,)") 4 Public (ForallType [(0,KStar),(1,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("ReadWriteBase","_Dict#ReadWrite") [TVar 1])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("ReadWriteBase","_Dict#ReadWrite") [TVar 0])) (FuncType (TCons ("Data.Map","Map") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","(,)") [TCons ("Prelude","(,)") [TVar 1,TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]])))))) (Rule [1,2,3,4] (Let [(5,Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("ReadWriteBase","readRW") [Var 1],Var 3],Var 4]),(6,Comb FuncCall ("ReadWriteBase","_impl#readRW#ReadWriteBase.ReadWrite#(,)._#selFP35#x") [Var 5]),(7,Comb FuncCall ("ReadWriteBase","_impl#readRW#ReadWriteBase.ReadWrite#(,)._#selFP36#r1") [Var 5]),(8,Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("ReadWriteBase","readRW") [Var 2],Var 3],Var 7]),(9,Comb FuncCall ("ReadWriteBase","_impl#readRW#ReadWriteBase.ReadWrite#(,)._#selFP33#y") [Var 8]),(10,Comb FuncCall ("ReadWriteBase","_impl#readRW#ReadWriteBase.ReadWrite#(,)._#selFP34#r2") [Var 8])] (Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Prelude","(,)") [Var 6,Var 9],Var 10]))),Func ("ReadWriteBase","_impl#readRW#ReadWriteBase.ReadWrite#(,)._#selFP35#x") 100000 Private (ForallType [(0,KStar)] (FuncType (TCons ("Prelude","(,)") [TVar 0,TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TVar 0))) (Rule [1] (Case Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Var 2)])),Func ("ReadWriteBase","_impl#readRW#ReadWriteBase.ReadWrite#(,)._#selFP36#r1") 100000 Private (ForallType [(0,KStar)] (FuncType (TCons ("Prelude","(,)") [TVar 0,TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (Rule [1] (Case Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Var 3)])),Func ("ReadWriteBase","_impl#readRW#ReadWriteBase.ReadWrite#(,)._#selFP33#y") 100000 Private (ForallType [(0,KStar)] (FuncType (TCons ("Prelude","(,)") [TVar 0,TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TVar 0))) (Rule [1] (Case Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Var 2)])),Func ("ReadWriteBase","_impl#readRW#ReadWriteBase.ReadWrite#(,)._#selFP34#r2") 100000 Private (ForallType [(0,KStar)] (FuncType (TCons ("Prelude","(,)") [TVar 0,TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (Rule [1] (Case Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Var 3)])),Func ("ReadWriteBase","_impl#showRW#ReadWriteBase.ReadWrite#(,)") 4 Public (ForallType [(0,KStar),(1,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("ReadWriteBase","_Dict#ReadWrite") [TVar 1])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("ReadWriteBase","_Dict#ReadWrite") [TVar 0])) (FuncType (TCons ("Data.Map","Map") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","(,)") [TVar 1,TVar 0]) (TCons ("Prelude","(,)") [TCons ("Data.Map","Map") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])])))))) (Rule [1,2,3,4] (Case Flex (Var 4) [Branch (Pattern ("Prelude","(,)") [5,6]) (Let [(7,Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("ReadWriteBase","showRW") [Var 1],Var 3],Var 5]),(8,Comb FuncCall ("ReadWriteBase","_impl#showRW#ReadWriteBase.ReadWrite#(,)._#selFP41#strs'") [Var 7]),(9,Comb FuncCall ("ReadWriteBase","_impl#showRW#ReadWriteBase.ReadWrite#(,)._#selFP42#x'") [Var 7]),(10,Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("ReadWriteBase","showRW") [Var 2],Var 8],Var 6]),(11,Comb FuncCall ("ReadWriteBase","_impl#showRW#ReadWriteBase.ReadWrite#(,)._#selFP39#strs''") [Var 10]),(12,Comb FuncCall ("ReadWriteBase","_impl#showRW#ReadWriteBase.ReadWrite#(,)._#selFP40#y'") [Var 10])] (Comb ConsCall ("Prelude","(,)") [Var 11,Comb FuncCall ("Prelude",".") [Var 9,Var 12]]))])),Func ("ReadWriteBase","_impl#showRW#ReadWriteBase.ReadWrite#(,)._#selFP41#strs'") 100000 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Data.Map","Map") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])]) (TCons ("Data.Map","Map") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]])) (Rule [1] (Case Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Var 2)])),Func ("ReadWriteBase","_impl#showRW#ReadWriteBase.ReadWrite#(,)._#selFP42#x'") 100000 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Data.Map","Map") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (Rule [1] (Case Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Var 3)])),Func ("ReadWriteBase","_impl#showRW#ReadWriteBase.ReadWrite#(,)._#selFP39#strs''") 100000 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Data.Map","Map") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])]) (TCons ("Data.Map","Map") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]])) (Rule [1] (Case Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Var 2)])),Func ("ReadWriteBase","_impl#showRW#ReadWriteBase.ReadWrite#(,)._#selFP40#y'") 100000 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Data.Map","Map") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (Rule [1] (Case Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Var 3)])),Func ("ReadWriteBase","_impl#showType#ReadWriteBase.ReadWrite#(,)") 100000 Public (ForallType [(0,KStar),(1,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("ReadWriteBase","_Dict#ReadWrite") [TVar 1])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("ReadWriteBase","_Dict#ReadWrite") [TVar 0])) (FuncType (TCons ("Prelude","(,)") [TVar 1,TVar 0]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))))) (Rule [1,2,3] (Case Flex (Var 3) [Branch (Pattern ("Prelude","(,)") [4,5]) (Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc '('),Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("ReadWriteBase","showType") [Var 1],Var 4],Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc ','),Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("ReadWriteBase","showType") [Var 2],Var 5],Comb ConsCall ("Prelude",":") [Lit (Charc ')'),Comb ConsCall ("Prelude","[]") []]]]]])])),Func ("ReadWriteBase","_impl#writeRW#ReadWriteBase.ReadWrite#(,)") 5 Public (ForallType [(0,KStar),(1,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("ReadWriteBase","_Dict#ReadWrite") [TVar 1])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("ReadWriteBase","_Dict#ReadWrite") [TVar 0])) (FuncType (TCons ("System.IO","Handle") []) (FuncType (TCons ("Prelude","(,)") [TVar 1,TVar 0]) (FuncType (TCons ("Data.Map","Map") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","IO") [TCons ("Data.Map","Map") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))))))) (Rule [1,2,3,4,5] (Case Flex (Var 4) [Branch (Pattern ("Prelude","(,)") [6,7]) (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#>>=#Prelude.Monad#Prelude.IO") [],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("ReadWriteBase","writeRW") [Var 1],Var 3],Var 6],Var 5]],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("ReadWriteBase","writeRW") [Var 2],Var 3],Var 7]])])),Func ("ReadWriteBase","_impl#readListRW#ReadWriteBase.ReadWrite#(,)") 100000 Public (ForallType [(0,KStar),(1,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("ReadWriteBase","_Dict#ReadWrite") [TVar 1])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("ReadWriteBase","_Dict#ReadWrite") [TVar 0])) (FuncType (TCons ("Data.Map","Map") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 1,TVar 0]],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]])))))) (Rule [1,2] (Comb (FuncPartCall 2) ("ReadWriteBase","_def#readListRW#ReadWriteBase.ReadWrite") [Comb (FuncPartCall 1) ("ReadWriteBase","_inst#ReadWriteBase.ReadWrite#(,)") [Var 1,Var 2]])),Func ("ReadWriteBase","_impl#showListRW#ReadWriteBase.ReadWrite#(,)") 100000 Public (ForallType [(0,KStar),(1,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("ReadWriteBase","_Dict#ReadWrite") [TVar 1])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("ReadWriteBase","_Dict#ReadWrite") [TVar 0])) (FuncType (TCons ("Data.Map","Map") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 1,TVar 0]]) (TCons ("Prelude","(,)") [TCons ("Data.Map","Map") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])])))))) (Rule [1,2] (Comb (FuncPartCall 2) ("ReadWriteBase","_def#showListRW#ReadWriteBase.ReadWrite") [Comb (FuncPartCall 1) ("ReadWriteBase","_inst#ReadWriteBase.ReadWrite#(,)") [Var 1,Var 2]])),Func ("ReadWriteBase","_impl#writeListRW#ReadWriteBase.ReadWrite#(,)") 100000 Public (ForallType [(0,KStar),(1,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("ReadWriteBase","_Dict#ReadWrite") [TVar 1])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("ReadWriteBase","_Dict#ReadWrite") [TVar 0])) (FuncType (TCons ("System.IO","Handle") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 1,TVar 0]]) (FuncType (TCons ("Data.Map","Map") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","IO") [TCons ("Data.Map","Map") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))))))) (Rule [1,2] (Comb (FuncPartCall 3) ("ReadWriteBase","_def#writeListRW#ReadWriteBase.ReadWrite") [Comb (FuncPartCall 1) ("ReadWriteBase","_inst#ReadWriteBase.ReadWrite#(,)") [Var 1,Var 2]])),Func ("ReadWriteBase","_inst#ReadWriteBase.ReadWrite#(,,)") 4 Public (ForallType [(0,KStar),(1,KStar),(2,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("ReadWriteBase","_Dict#ReadWrite") [TVar 2])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("ReadWriteBase","_Dict#ReadWrite") [TVar 1])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("ReadWriteBase","_Dict#ReadWrite") [TVar 0])) (FuncType (TCons ("Prelude","()") []) (TCons ("ReadWriteBase","_Dict#ReadWrite") [TCons ("Prelude","(,,)") [TVar 2,TVar 1,TVar 0]])))))) (Rule [1,2,3,4] (Case Flex (Var 4) [Branch (Pattern ("Prelude","()") []) (Comb ConsCall ("ReadWriteBase","_Dict#ReadWrite") [Comb (FuncPartCall 2) ("ReadWriteBase","_impl#readRW#ReadWriteBase.ReadWrite#(,,)") [Var 1,Var 2,Var 3],Comb (FuncPartCall 2) ("ReadWriteBase","_impl#showRW#ReadWriteBase.ReadWrite#(,,)") [Var 1,Var 2,Var 3],Comb (FuncPartCall 1) ("ReadWriteBase","_impl#showType#ReadWriteBase.ReadWrite#(,,)") [Var 1,Var 2,Var 3],Comb (FuncPartCall 3) ("ReadWriteBase","_impl#writeRW#ReadWriteBase.ReadWrite#(,,)") [Var 1,Var 2,Var 3],Comb FuncCall ("ReadWriteBase","_impl#readListRW#ReadWriteBase.ReadWrite#(,,)") [Var 1,Var 2,Var 3],Comb FuncCall ("ReadWriteBase","_impl#showListRW#ReadWriteBase.ReadWrite#(,,)") [Var 1,Var 2,Var 3],Comb FuncCall ("ReadWriteBase","_impl#writeListRW#ReadWriteBase.ReadWrite#(,,)") [Var 1,Var 2,Var 3]])])),Func ("ReadWriteBase","_impl#readRW#ReadWriteBase.ReadWrite#(,,)") 5 Public (ForallType [(0,KStar),(1,KStar),(2,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("ReadWriteBase","_Dict#ReadWrite") [TVar 2])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("ReadWriteBase","_Dict#ReadWrite") [TVar 1])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("ReadWriteBase","_Dict#ReadWrite") [TVar 0])) (FuncType (TCons ("Data.Map","Map") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","(,)") [TCons ("Prelude","(,,)") [TVar 2,TVar 1,TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]))))))) (Rule [1,2,3,4,5] (Let [(6,Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("ReadWriteBase","readRW") [Var 1],Var 4],Var 5]),(7,Comb FuncCall ("ReadWriteBase","_impl#readRW#ReadWriteBase.ReadWrite#(,,)._#selFP50#x") [Var 6]),(8,Comb FuncCall ("ReadWriteBase","_impl#readRW#ReadWriteBase.ReadWrite#(,,)._#selFP51#r1") [Var 6]),(9,Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("ReadWriteBase","readRW") [Var 2],Var 4],Var 8]),(10,Comb FuncCall ("ReadWriteBase","_impl#readRW#ReadWriteBase.ReadWrite#(,,)._#selFP48#y") [Var 9]),(11,Comb FuncCall ("ReadWriteBase","_impl#readRW#ReadWriteBase.ReadWrite#(,,)._#selFP49#r2") [Var 9]),(12,Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("ReadWriteBase","readRW") [Var 3],Var 4],Var 11]),(13,Comb FuncCall ("ReadWriteBase","_impl#readRW#ReadWriteBase.ReadWrite#(,,)._#selFP46#z") [Var 12]),(14,Comb FuncCall ("ReadWriteBase","_impl#readRW#ReadWriteBase.ReadWrite#(,,)._#selFP47#r3") [Var 12])] (Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Prelude","(,,)") [Var 7,Var 10,Var 13],Var 14]))),Func ("ReadWriteBase","_impl#readRW#ReadWriteBase.ReadWrite#(,,)._#selFP50#x") 100000 Private (ForallType [(0,KStar)] (FuncType (TCons ("Prelude","(,)") [TVar 0,TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TVar 0))) (Rule [1] (Case Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Var 2)])),Func ("ReadWriteBase","_impl#readRW#ReadWriteBase.ReadWrite#(,,)._#selFP51#r1") 100000 Private (ForallType [(0,KStar)] (FuncType (TCons ("Prelude","(,)") [TVar 0,TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (Rule [1] (Case Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Var 3)])),Func ("ReadWriteBase","_impl#readRW#ReadWriteBase.ReadWrite#(,,)._#selFP48#y") 100000 Private (ForallType [(0,KStar)] (FuncType (TCons ("Prelude","(,)") [TVar 0,TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TVar 0))) (Rule [1] (Case Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Var 2)])),Func ("ReadWriteBase","_impl#readRW#ReadWriteBase.ReadWrite#(,,)._#selFP49#r2") 100000 Private (ForallType [(0,KStar)] (FuncType (TCons ("Prelude","(,)") [TVar 0,TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (Rule [1] (Case Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Var 3)])),Func ("ReadWriteBase","_impl#readRW#ReadWriteBase.ReadWrite#(,,)._#selFP46#z") 100000 Private (ForallType [(0,KStar)] (FuncType (TCons ("Prelude","(,)") [TVar 0,TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TVar 0))) (Rule [1] (Case Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Var 2)])),Func ("ReadWriteBase","_impl#readRW#ReadWriteBase.ReadWrite#(,,)._#selFP47#r3") 100000 Private (ForallType [(0,KStar)] (FuncType (TCons ("Prelude","(,)") [TVar 0,TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (Rule [1] (Case Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Var 3)])),Func ("ReadWriteBase","_impl#showRW#ReadWriteBase.ReadWrite#(,,)") 5 Public (ForallType [(0,KStar),(1,KStar),(2,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("ReadWriteBase","_Dict#ReadWrite") [TVar 2])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("ReadWriteBase","_Dict#ReadWrite") [TVar 1])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("ReadWriteBase","_Dict#ReadWrite") [TVar 0])) (FuncType (TCons ("Data.Map","Map") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","(,,)") [TVar 2,TVar 1,TVar 0]) (TCons ("Prelude","(,)") [TCons ("Data.Map","Map") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])]))))))) (Rule [1,2,3,4,5] (Case Flex (Var 5) [Branch (Pattern ("Prelude","(,,)") [6,7,8]) (Let [(9,Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("ReadWriteBase","showRW") [Var 1],Var 4],Var 6]),(10,Comb FuncCall ("ReadWriteBase","_impl#showRW#ReadWriteBase.ReadWrite#(,,)._#selFP59#strs'") [Var 9]),(11,Comb FuncCall ("ReadWriteBase","_impl#showRW#ReadWriteBase.ReadWrite#(,,)._#selFP60#x'") [Var 9]),(12,Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("ReadWriteBase","showRW") [Var 2],Var 10],Var 7]),(13,Comb FuncCall ("ReadWriteBase","_impl#showRW#ReadWriteBase.ReadWrite#(,,)._#selFP57#strs''") [Var 12]),(14,Comb FuncCall ("ReadWriteBase","_impl#showRW#ReadWriteBase.ReadWrite#(,,)._#selFP58#y'") [Var 12]),(15,Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("ReadWriteBase","showRW") [Var 3],Var 13],Var 8]),(16,Comb FuncCall ("ReadWriteBase","_impl#showRW#ReadWriteBase.ReadWrite#(,,)._#selFP55#strs'''") [Var 15]),(17,Comb FuncCall ("ReadWriteBase","_impl#showRW#ReadWriteBase.ReadWrite#(,,)._#selFP56#z'") [Var 15])] (Comb ConsCall ("Prelude","(,)") [Var 16,Comb FuncCall ("Prelude",".") [Var 11,Comb FuncCall ("Prelude",".") [Var 14,Var 17]]]))])),Func ("ReadWriteBase","_impl#showRW#ReadWriteBase.ReadWrite#(,,)._#selFP59#strs'") 100000 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Data.Map","Map") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])]) (TCons ("Data.Map","Map") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]])) (Rule [1] (Case Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Var 2)])),Func ("ReadWriteBase","_impl#showRW#ReadWriteBase.ReadWrite#(,,)._#selFP60#x'") 100000 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Data.Map","Map") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (Rule [1] (Case Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Var 3)])),Func ("ReadWriteBase","_impl#showRW#ReadWriteBase.ReadWrite#(,,)._#selFP57#strs''") 100000 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Data.Map","Map") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])]) (TCons ("Data.Map","Map") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]])) (Rule [1] (Case Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Var 2)])),Func ("ReadWriteBase","_impl#showRW#ReadWriteBase.ReadWrite#(,,)._#selFP58#y'") 100000 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Data.Map","Map") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (Rule [1] (Case Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Var 3)])),Func ("ReadWriteBase","_impl#showRW#ReadWriteBase.ReadWrite#(,,)._#selFP55#strs'''") 100000 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Data.Map","Map") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])]) (TCons ("Data.Map","Map") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]])) (Rule [1] (Case Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Var 2)])),Func ("ReadWriteBase","_impl#showRW#ReadWriteBase.ReadWrite#(,,)._#selFP56#z'") 100000 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Data.Map","Map") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (Rule [1] (Case Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Var 3)])),Func ("ReadWriteBase","_impl#showType#ReadWriteBase.ReadWrite#(,,)") 4 Public (ForallType [(0,KStar),(1,KStar),(2,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("ReadWriteBase","_Dict#ReadWrite") [TVar 2])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("ReadWriteBase","_Dict#ReadWrite") [TVar 1])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("ReadWriteBase","_Dict#ReadWrite") [TVar 0])) (FuncType (TCons ("Prelude","(,,)") [TVar 2,TVar 1,TVar 0]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])))))) (Rule [1,2,3,4] (Case Flex (Var 4) [Branch (Pattern ("Prelude","(,,)") [5,6,7]) (Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc '('),Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("ReadWriteBase","showType") [Var 1],Var 5],Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc ','),Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("ReadWriteBase","showType") [Var 2],Var 6],Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc ','),Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("ReadWriteBase","showType") [Var 3],Var 7],Comb ConsCall ("Prelude",":") [Lit (Charc ')'),Comb ConsCall ("Prelude","[]") []]]]]]]])])),Func ("ReadWriteBase","_impl#writeRW#ReadWriteBase.ReadWrite#(,,)") 6 Public (ForallType [(0,KStar),(1,KStar),(2,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("ReadWriteBase","_Dict#ReadWrite") [TVar 2])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("ReadWriteBase","_Dict#ReadWrite") [TVar 1])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("ReadWriteBase","_Dict#ReadWrite") [TVar 0])) (FuncType (TCons ("System.IO","Handle") []) (FuncType (TCons ("Prelude","(,,)") [TVar 2,TVar 1,TVar 0]) (FuncType (TCons ("Data.Map","Map") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","IO") [TCons ("Data.Map","Map") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))))))) (Rule [1,2,3,4,5,6] (Case Flex (Var 5) [Branch (Pattern ("Prelude","(,,)") [7,8,9]) (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#>>=#Prelude.Monad#Prelude.IO") [],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#>>=#Prelude.Monad#Prelude.IO") [],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("ReadWriteBase","writeRW") [Var 1],Var 4],Var 7],Var 6]],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("ReadWriteBase","writeRW") [Var 2],Var 4],Var 8]]],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("ReadWriteBase","writeRW") [Var 3],Var 4],Var 9]])])),Func ("ReadWriteBase","_impl#readListRW#ReadWriteBase.ReadWrite#(,,)") 100000 Public (ForallType [(0,KStar),(1,KStar),(2,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("ReadWriteBase","_Dict#ReadWrite") [TVar 2])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("ReadWriteBase","_Dict#ReadWrite") [TVar 1])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("ReadWriteBase","_Dict#ReadWrite") [TVar 0])) (FuncType (TCons ("Data.Map","Map") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","(,,)") [TVar 2,TVar 1,TVar 0]],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]))))))) (Rule [1,2,3] (Comb (FuncPartCall 2) ("ReadWriteBase","_def#readListRW#ReadWriteBase.ReadWrite") [Comb (FuncPartCall 1) ("ReadWriteBase","_inst#ReadWriteBase.ReadWrite#(,,)") [Var 1,Var 2,Var 3]])),Func ("ReadWriteBase","_impl#showListRW#ReadWriteBase.ReadWrite#(,,)") 100000 Public (ForallType [(0,KStar),(1,KStar),(2,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("ReadWriteBase","_Dict#ReadWrite") [TVar 2])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("ReadWriteBase","_Dict#ReadWrite") [TVar 1])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("ReadWriteBase","_Dict#ReadWrite") [TVar 0])) (FuncType (TCons ("Data.Map","Map") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,,)") [TVar 2,TVar 1,TVar 0]]) (TCons ("Prelude","(,)") [TCons ("Data.Map","Map") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])]))))))) (Rule [1,2,3] (Comb (FuncPartCall 2) ("ReadWriteBase","_def#showListRW#ReadWriteBase.ReadWrite") [Comb (FuncPartCall 1) ("ReadWriteBase","_inst#ReadWriteBase.ReadWrite#(,,)") [Var 1,Var 2,Var 3]])),Func ("ReadWriteBase","_impl#writeListRW#ReadWriteBase.ReadWrite#(,,)") 100000 Public (ForallType [(0,KStar),(1,KStar),(2,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("ReadWriteBase","_Dict#ReadWrite") [TVar 2])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("ReadWriteBase","_Dict#ReadWrite") [TVar 1])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("ReadWriteBase","_Dict#ReadWrite") [TVar 0])) (FuncType (TCons ("System.IO","Handle") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,,)") [TVar 2,TVar 1,TVar 0]]) (FuncType (TCons ("Data.Map","Map") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","IO") [TCons ("Data.Map","Map") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))))))) (Rule [1,2,3] (Comb (FuncPartCall 3) ("ReadWriteBase","_def#writeListRW#ReadWriteBase.ReadWrite") [Comb (FuncPartCall 1) ("ReadWriteBase","_inst#ReadWriteBase.ReadWrite#(,,)") [Var 1,Var 2,Var 3]])),Func ("ReadWriteBase","_inst#ReadWriteBase.ReadWrite#(,,,)") 5 Public (ForallType [(0,KStar),(1,KStar),(2,KStar),(3,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("ReadWriteBase","_Dict#ReadWrite") [TVar 3])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("ReadWriteBase","_Dict#ReadWrite") [TVar 2])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("ReadWriteBase","_Dict#ReadWrite") [TVar 1])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("ReadWriteBase","_Dict#ReadWrite") [TVar 0])) (FuncType (TCons ("Prelude","()") []) (TCons ("ReadWriteBase","_Dict#ReadWrite") [TCons ("Prelude","(,,,)") [TVar 3,TVar 2,TVar 1,TVar 0]]))))))) (Rule [1,2,3,4,5] (Case Flex (Var 5) [Branch (Pattern ("Prelude","()") []) (Comb ConsCall ("ReadWriteBase","_Dict#ReadWrite") [Comb (FuncPartCall 2) ("ReadWriteBase","_impl#readRW#ReadWriteBase.ReadWrite#(,,,)") [Var 1,Var 2,Var 3,Var 4],Comb (FuncPartCall 2) ("ReadWriteBase","_impl#showRW#ReadWriteBase.ReadWrite#(,,,)") [Var 1,Var 2,Var 3,Var 4],Comb (FuncPartCall 1) ("ReadWriteBase","_impl#showType#ReadWriteBase.ReadWrite#(,,,)") [Var 1,Var 2,Var 3,Var 4],Comb (FuncPartCall 3) ("ReadWriteBase","_impl#writeRW#ReadWriteBase.ReadWrite#(,,,)") [Var 1,Var 2,Var 3,Var 4],Comb FuncCall ("ReadWriteBase","_impl#readListRW#ReadWriteBase.ReadWrite#(,,,)") [Var 1,Var 2,Var 3,Var 4],Comb FuncCall ("ReadWriteBase","_impl#showListRW#ReadWriteBase.ReadWrite#(,,,)") [Var 1,Var 2,Var 3,Var 4],Comb FuncCall ("ReadWriteBase","_impl#writeListRW#ReadWriteBase.ReadWrite#(,,,)") [Var 1,Var 2,Var 3,Var 4]])])),Func ("ReadWriteBase","_impl#readRW#ReadWriteBase.ReadWrite#(,,,)") 6 Public (ForallType [(0,KStar),(1,KStar),(2,KStar),(3,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("ReadWriteBase","_Dict#ReadWrite") [TVar 3])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("ReadWriteBase","_Dict#ReadWrite") [TVar 2])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("ReadWriteBase","_Dict#ReadWrite") [TVar 1])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("ReadWriteBase","_Dict#ReadWrite") [TVar 0])) (FuncType (TCons ("Data.Map","Map") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","(,)") [TCons ("Prelude","(,,,)") [TVar 3,TVar 2,TVar 1,TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]])))))))) (Rule [1,2,3,4,5,6] (Let [(7,Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("ReadWriteBase","readRW") [Var 1],Var 5],Var 6]),(8,Comb FuncCall ("ReadWriteBase","_impl#readRW#ReadWriteBase.ReadWrite#(,,,)._#selFP71#x") [Var 7]),(9,Comb FuncCall ("ReadWriteBase","_impl#readRW#ReadWriteBase.ReadWrite#(,,,)._#selFP72#r1") [Var 7]),(10,Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("ReadWriteBase","readRW") [Var 2],Var 5],Var 9]),(11,Comb FuncCall ("ReadWriteBase","_impl#readRW#ReadWriteBase.ReadWrite#(,,,)._#selFP69#y") [Var 10]),(12,Comb FuncCall ("ReadWriteBase","_impl#readRW#ReadWriteBase.ReadWrite#(,,,)._#selFP70#r2") [Var 10]),(13,Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("ReadWriteBase","readRW") [Var 3],Var 5],Var 12]),(14,Comb FuncCall ("ReadWriteBase","_impl#readRW#ReadWriteBase.ReadWrite#(,,,)._#selFP67#z") [Var 13]),(15,Comb FuncCall ("ReadWriteBase","_impl#readRW#ReadWriteBase.ReadWrite#(,,,)._#selFP68#r3") [Var 13]),(16,Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("ReadWriteBase","readRW") [Var 4],Var 5],Var 15]),(17,Comb FuncCall ("ReadWriteBase","_impl#readRW#ReadWriteBase.ReadWrite#(,,,)._#selFP65#w") [Var 16]),(18,Comb FuncCall ("ReadWriteBase","_impl#readRW#ReadWriteBase.ReadWrite#(,,,)._#selFP66#r4") [Var 16])] (Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Prelude","(,,,)") [Var 8,Var 11,Var 14,Var 17],Var 18]))),Func ("ReadWriteBase","_impl#readRW#ReadWriteBase.ReadWrite#(,,,)._#selFP71#x") 100000 Private (ForallType [(0,KStar)] (FuncType (TCons ("Prelude","(,)") [TVar 0,TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TVar 0))) (Rule [1] (Case Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Var 2)])),Func ("ReadWriteBase","_impl#readRW#ReadWriteBase.ReadWrite#(,,,)._#selFP72#r1") 100000 Private (ForallType [(0,KStar)] (FuncType (TCons ("Prelude","(,)") [TVar 0,TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (Rule [1] (Case Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Var 3)])),Func ("ReadWriteBase","_impl#readRW#ReadWriteBase.ReadWrite#(,,,)._#selFP69#y") 100000 Private (ForallType [(0,KStar)] (FuncType (TCons ("Prelude","(,)") [TVar 0,TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TVar 0))) (Rule [1] (Case Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Var 2)])),Func ("ReadWriteBase","_impl#readRW#ReadWriteBase.ReadWrite#(,,,)._#selFP70#r2") 100000 Private (ForallType [(0,KStar)] (FuncType (TCons ("Prelude","(,)") [TVar 0,TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (Rule [1] (Case Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Var 3)])),Func ("ReadWriteBase","_impl#readRW#ReadWriteBase.ReadWrite#(,,,)._#selFP67#z") 100000 Private (ForallType [(0,KStar)] (FuncType (TCons ("Prelude","(,)") [TVar 0,TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TVar 0))) (Rule [1] (Case Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Var 2)])),Func ("ReadWriteBase","_impl#readRW#ReadWriteBase.ReadWrite#(,,,)._#selFP68#r3") 100000 Private (ForallType [(0,KStar)] (FuncType (TCons ("Prelude","(,)") [TVar 0,TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (Rule [1] (Case Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Var 3)])),Func ("ReadWriteBase","_impl#readRW#ReadWriteBase.ReadWrite#(,,,)._#selFP65#w") 100000 Private (ForallType [(0,KStar)] (FuncType (TCons ("Prelude","(,)") [TVar 0,TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TVar 0))) (Rule [1] (Case Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Var 2)])),Func ("ReadWriteBase","_impl#readRW#ReadWriteBase.ReadWrite#(,,,)._#selFP66#r4") 100000 Private (ForallType [(0,KStar)] (FuncType (TCons ("Prelude","(,)") [TVar 0,TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (Rule [1] (Case Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Var 3)])),Func ("ReadWriteBase","_impl#showRW#ReadWriteBase.ReadWrite#(,,,)") 6 Public (ForallType [(0,KStar),(1,KStar),(2,KStar),(3,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("ReadWriteBase","_Dict#ReadWrite") [TVar 3])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("ReadWriteBase","_Dict#ReadWrite") [TVar 2])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("ReadWriteBase","_Dict#ReadWrite") [TVar 1])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("ReadWriteBase","_Dict#ReadWrite") [TVar 0])) (FuncType (TCons ("Data.Map","Map") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","(,,,)") [TVar 3,TVar 2,TVar 1,TVar 0]) (TCons ("Prelude","(,)") [TCons ("Data.Map","Map") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])])))))))) (Rule [1,2,3,4,5,6] (Case Flex (Var 6) [Branch (Pattern ("Prelude","(,,,)") [7,8,9,10]) (Let [(11,Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("ReadWriteBase","showRW") [Var 1],Var 5],Var 7]),(12,Comb FuncCall ("ReadWriteBase","_impl#showRW#ReadWriteBase.ReadWrite#(,,,)._#selFP83#strs'") [Var 11]),(13,Comb FuncCall ("ReadWriteBase","_impl#showRW#ReadWriteBase.ReadWrite#(,,,)._#selFP84#x'") [Var 11]),(14,Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("ReadWriteBase","showRW") [Var 2],Var 12],Var 8]),(15,Comb FuncCall ("ReadWriteBase","_impl#showRW#ReadWriteBase.ReadWrite#(,,,)._#selFP81#strs''") [Var 14]),(16,Comb FuncCall ("ReadWriteBase","_impl#showRW#ReadWriteBase.ReadWrite#(,,,)._#selFP82#y'") [Var 14]),(17,Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("ReadWriteBase","showRW") [Var 3],Var 15],Var 9]),(18,Comb FuncCall ("ReadWriteBase","_impl#showRW#ReadWriteBase.ReadWrite#(,,,)._#selFP79#strs'''") [Var 17]),(19,Comb FuncCall ("ReadWriteBase","_impl#showRW#ReadWriteBase.ReadWrite#(,,,)._#selFP80#z'") [Var 17]),(20,Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("ReadWriteBase","showRW") [Var 4],Var 18],Var 10]),(21,Comb FuncCall ("ReadWriteBase","_impl#showRW#ReadWriteBase.ReadWrite#(,,,)._#selFP77#strs''''") [Var 20]),(22,Comb FuncCall ("ReadWriteBase","_impl#showRW#ReadWriteBase.ReadWrite#(,,,)._#selFP78#w'") [Var 20])] (Comb ConsCall ("Prelude","(,)") [Var 21,Comb FuncCall ("Prelude",".") [Var 13,Comb FuncCall ("Prelude",".") [Var 16,Comb FuncCall ("Prelude",".") [Var 19,Var 22]]]]))])),Func ("ReadWriteBase","_impl#showRW#ReadWriteBase.ReadWrite#(,,,)._#selFP83#strs'") 100000 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Data.Map","Map") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])]) (TCons ("Data.Map","Map") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]])) (Rule [1] (Case Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Var 2)])),Func ("ReadWriteBase","_impl#showRW#ReadWriteBase.ReadWrite#(,,,)._#selFP84#x'") 100000 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Data.Map","Map") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (Rule [1] (Case Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Var 3)])),Func ("ReadWriteBase","_impl#showRW#ReadWriteBase.ReadWrite#(,,,)._#selFP81#strs''") 100000 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Data.Map","Map") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])]) (TCons ("Data.Map","Map") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]])) (Rule [1] (Case Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Var 2)])),Func ("ReadWriteBase","_impl#showRW#ReadWriteBase.ReadWrite#(,,,)._#selFP82#y'") 100000 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Data.Map","Map") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (Rule [1] (Case Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Var 3)])),Func ("ReadWriteBase","_impl#showRW#ReadWriteBase.ReadWrite#(,,,)._#selFP79#strs'''") 100000 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Data.Map","Map") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])]) (TCons ("Data.Map","Map") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]])) (Rule [1] (Case Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Var 2)])),Func ("ReadWriteBase","_impl#showRW#ReadWriteBase.ReadWrite#(,,,)._#selFP80#z'") 100000 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Data.Map","Map") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (Rule [1] (Case Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Var 3)])),Func ("ReadWriteBase","_impl#showRW#ReadWriteBase.ReadWrite#(,,,)._#selFP77#strs''''") 100000 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Data.Map","Map") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])]) (TCons ("Data.Map","Map") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]])) (Rule [1] (Case Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Var 2)])),Func ("ReadWriteBase","_impl#showRW#ReadWriteBase.ReadWrite#(,,,)._#selFP78#w'") 100000 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Data.Map","Map") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (Rule [1] (Case Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Var 3)])),Func ("ReadWriteBase","_impl#showType#ReadWriteBase.ReadWrite#(,,,)") 5 Public (ForallType [(0,KStar),(1,KStar),(2,KStar),(3,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("ReadWriteBase","_Dict#ReadWrite") [TVar 3])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("ReadWriteBase","_Dict#ReadWrite") [TVar 2])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("ReadWriteBase","_Dict#ReadWrite") [TVar 1])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("ReadWriteBase","_Dict#ReadWrite") [TVar 0])) (FuncType (TCons ("Prelude","(,,,)") [TVar 3,TVar 2,TVar 1,TVar 0]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))))))) (Rule [1,2,3,4,5] (Case Flex (Var 5) [Branch (Pattern ("Prelude","(,,,)") [6,7,8,9]) (Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc '('),Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("ReadWriteBase","showType") [Var 1],Var 6],Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc ','),Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("ReadWriteBase","showType") [Var 2],Var 7],Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc ','),Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("ReadWriteBase","showType") [Var 3],Var 8],Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc ','),Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("ReadWriteBase","showType") [Var 4],Var 9],Comb ConsCall ("Prelude",":") [Lit (Charc ')'),Comb ConsCall ("Prelude","[]") []]]]]]]]]])])),Func ("ReadWriteBase","_impl#writeRW#ReadWriteBase.ReadWrite#(,,,)") 7 Public (ForallType [(0,KStar),(1,KStar),(2,KStar),(3,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("ReadWriteBase","_Dict#ReadWrite") [TVar 3])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("ReadWriteBase","_Dict#ReadWrite") [TVar 2])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("ReadWriteBase","_Dict#ReadWrite") [TVar 1])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("ReadWriteBase","_Dict#ReadWrite") [TVar 0])) (FuncType (TCons ("System.IO","Handle") []) (FuncType (TCons ("Prelude","(,,,)") [TVar 3,TVar 2,TVar 1,TVar 0]) (FuncType (TCons ("Data.Map","Map") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","IO") [TCons ("Data.Map","Map") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))))))))) (Rule [1,2,3,4,5,6,7] (Case Flex (Var 6) [Branch (Pattern ("Prelude","(,,,)") [8,9,10,11]) (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#>>=#Prelude.Monad#Prelude.IO") [],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#>>=#Prelude.Monad#Prelude.IO") [],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#>>=#Prelude.Monad#Prelude.IO") [],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("ReadWriteBase","writeRW") [Var 1],Var 5],Var 8],Var 7]],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("ReadWriteBase","writeRW") [Var 2],Var 5],Var 9]]],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("ReadWriteBase","writeRW") [Var 3],Var 5],Var 10]]],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("ReadWriteBase","writeRW") [Var 4],Var 5],Var 11]])])),Func ("ReadWriteBase","_impl#readListRW#ReadWriteBase.ReadWrite#(,,,)") 4 Public (ForallType [(0,KStar),(1,KStar),(2,KStar),(3,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("ReadWriteBase","_Dict#ReadWrite") [TVar 3])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("ReadWriteBase","_Dict#ReadWrite") [TVar 2])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("ReadWriteBase","_Dict#ReadWrite") [TVar 1])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("ReadWriteBase","_Dict#ReadWrite") [TVar 0])) (FuncType (TCons ("Data.Map","Map") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","(,,,)") [TVar 3,TVar 2,TVar 1,TVar 0]],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]])))))))) (Rule [1,2,3,4] (Comb (FuncPartCall 2) ("ReadWriteBase","_def#readListRW#ReadWriteBase.ReadWrite") [Comb (FuncPartCall 1) ("ReadWriteBase","_inst#ReadWriteBase.ReadWrite#(,,,)") [Var 1,Var 2,Var 3,Var 4]])),Func ("ReadWriteBase","_impl#showListRW#ReadWriteBase.ReadWrite#(,,,)") 4 Public (ForallType [(0,KStar),(1,KStar),(2,KStar),(3,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("ReadWriteBase","_Dict#ReadWrite") [TVar 3])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("ReadWriteBase","_Dict#ReadWrite") [TVar 2])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("ReadWriteBase","_Dict#ReadWrite") [TVar 1])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("ReadWriteBase","_Dict#ReadWrite") [TVar 0])) (FuncType (TCons ("Data.Map","Map") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,,,)") [TVar 3,TVar 2,TVar 1,TVar 0]]) (TCons ("Prelude","(,)") [TCons ("Data.Map","Map") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])])))))))) (Rule [1,2,3,4] (Comb (FuncPartCall 2) ("ReadWriteBase","_def#showListRW#ReadWriteBase.ReadWrite") [Comb (FuncPartCall 1) ("ReadWriteBase","_inst#ReadWriteBase.ReadWrite#(,,,)") [Var 1,Var 2,Var 3,Var 4]])),Func ("ReadWriteBase","_impl#writeListRW#ReadWriteBase.ReadWrite#(,,,)") 4 Public (ForallType [(0,KStar),(1,KStar),(2,KStar),(3,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("ReadWriteBase","_Dict#ReadWrite") [TVar 3])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("ReadWriteBase","_Dict#ReadWrite") [TVar 2])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("ReadWriteBase","_Dict#ReadWrite") [TVar 1])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("ReadWriteBase","_Dict#ReadWrite") [TVar 0])) (FuncType (TCons ("System.IO","Handle") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,,,)") [TVar 3,TVar 2,TVar 1,TVar 0]]) (FuncType (TCons ("Data.Map","Map") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","IO") [TCons ("Data.Map","Map") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))))))))) (Rule [1,2,3,4] (Comb (FuncPartCall 3) ("ReadWriteBase","_def#writeListRW#ReadWriteBase.ReadWrite") [Comb (FuncPartCall 1) ("ReadWriteBase","_inst#ReadWriteBase.ReadWrite#(,,,)") [Var 1,Var 2,Var 3,Var 4]])),Func ("ReadWriteBase","version_ReadWriteBase") 0 Public (TCons ("Prelude","Float") []) (Rule [] (Lit (Floatc 0.1))),Func ("ReadWriteBase","lc") 100000 Public (ForallType [(0,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Num") [TVar 0])) (TVar 0))) (Rule [1] (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","fromInt") [Var 1],Lit (Intc 94)])),Func ("ReadWriteBase","lookupCoding") 100000 Public (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Char") [])) (Rule [1] (Comb FuncCall ("Prelude","!!") [Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude",":") [Lit (Charc '!'),Comb ConsCall ("Prelude",":") [Lit (Charc '"'),Comb ConsCall ("Prelude",":") [Lit (Charc '#'),Comb ConsCall ("Prelude",":") [Lit (Charc '$'),Comb ConsCall ("Prelude",":") [Lit (Charc '%'),Comb ConsCall ("Prelude",":") [Lit (Charc '&'),Comb ConsCall ("Prelude",":") [Lit (Charc '\''),Comb ConsCall ("Prelude",":") [Lit (Charc '('),Comb ConsCall ("Prelude",":") [Lit (Charc ')'),Comb ConsCall ("Prelude",":") [Lit (Charc '*'),Comb ConsCall ("Prelude",":") [Lit (Charc '+'),Comb ConsCall ("Prelude",":") [Lit (Charc ','),Comb ConsCall ("Prelude",":") [Lit (Charc '-'),Comb ConsCall ("Prelude",":") [Lit (Charc '.'),Comb ConsCall ("Prelude",":") [Lit (Charc '/'),Comb ConsCall ("Prelude",":") [Lit (Charc '0'),Comb ConsCall ("Prelude",":") [Lit (Charc '1'),Comb ConsCall ("Prelude",":") [Lit (Charc '2'),Comb ConsCall ("Prelude",":") [Lit (Charc '3'),Comb ConsCall ("Prelude",":") [Lit (Charc '4'),Comb ConsCall ("Prelude",":") [Lit (Charc '5'),Comb ConsCall ("Prelude",":") [Lit (Charc '6'),Comb ConsCall ("Prelude",":") [Lit (Charc '7'),Comb ConsCall ("Prelude",":") [Lit (Charc '8'),Comb ConsCall ("Prelude",":") [Lit (Charc '9'),Comb ConsCall ("Prelude",":") [Lit (Charc ':'),Comb ConsCall ("Prelude",":") [Lit (Charc '<'),Comb ConsCall ("Prelude",":") [Lit (Charc '='),Comb ConsCall ("Prelude",":") [Lit (Charc '>'),Comb ConsCall ("Prelude",":") [Lit (Charc '?'),Comb ConsCall ("Prelude",":") [Lit (Charc '@'),Comb ConsCall ("Prelude",":") [Lit (Charc 'A'),Comb ConsCall ("Prelude",":") [Lit (Charc 'B'),Comb ConsCall ("Prelude",":") [Lit (Charc 'C'),Comb ConsCall ("Prelude",":") [Lit (Charc 'D'),Comb ConsCall ("Prelude",":") [Lit (Charc 'E'),Comb ConsCall ("Prelude",":") [Lit (Charc 'F'),Comb ConsCall ("Prelude",":") [Lit (Charc 'G'),Comb ConsCall ("Prelude",":") [Lit (Charc 'H'),Comb ConsCall ("Prelude",":") [Lit (Charc 'I'),Comb ConsCall ("Prelude",":") [Lit (Charc 'J'),Comb ConsCall ("Prelude",":") [Lit (Charc 'K'),Comb ConsCall ("Prelude",":") [Lit (Charc 'L'),Comb ConsCall ("Prelude",":") [Lit (Charc 'M'),Comb ConsCall ("Prelude",":") [Lit (Charc 'N'),Comb ConsCall ("Prelude",":") [Lit (Charc 'O'),Comb ConsCall ("Prelude",":") [Lit (Charc 'P'),Comb ConsCall ("Prelude",":") [Lit (Charc 'Q'),Comb ConsCall ("Prelude",":") [Lit (Charc 'R'),Comb ConsCall ("Prelude",":") [Lit (Charc 'S'),Comb ConsCall ("Prelude",":") [Lit (Charc 'T'),Comb ConsCall ("Prelude",":") [Lit (Charc 'U'),Comb ConsCall ("Prelude",":") [Lit (Charc 'V'),Comb ConsCall ("Prelude",":") [Lit (Charc 'W'),Comb ConsCall ("Prelude",":") [Lit (Charc 'X'),Comb ConsCall ("Prelude",":") [Lit (Charc 'Y'),Comb ConsCall ("Prelude",":") [Lit (Charc 'Z'),Comb ConsCall ("Prelude",":") [Lit (Charc '['),Comb ConsCall ("Prelude",":") [Lit (Charc '\\'),Comb ConsCall ("Prelude",":") [Lit (Charc ']'),Comb ConsCall ("Prelude",":") [Lit (Charc '^'),Comb ConsCall ("Prelude",":") [Lit (Charc '_'),Comb ConsCall ("Prelude",":") [Lit (Charc '`'),Comb ConsCall ("Prelude",":") [Lit (Charc 'a'),Comb ConsCall ("Prelude",":") [Lit (Charc 'b'),Comb ConsCall ("Prelude",":") [Lit (Charc 'c'),Comb ConsCall ("Prelude",":") [Lit (Charc 'd'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc 'f'),Comb ConsCall ("Prelude",":") [Lit (Charc 'g'),Comb ConsCall ("Prelude",":") [Lit (Charc 'h'),Comb ConsCall ("Prelude",":") [Lit (Charc 'i'),Comb ConsCall ("Prelude",":") [Lit (Charc 'j'),Comb ConsCall ("Prelude",":") [Lit (Charc 'k'),Comb ConsCall ("Prelude",":") [Lit (Charc 'l'),Comb ConsCall ("Prelude",":") [Lit (Charc 'm'),Comb ConsCall ("Prelude",":") [Lit (Charc 'n'),Comb ConsCall ("Prelude",":") [Lit (Charc 'o'),Comb ConsCall ("Prelude",":") [Lit (Charc 'p'),Comb ConsCall ("Prelude",":") [Lit (Charc 'q'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude",":") [Lit (Charc 's'),Comb ConsCall ("Prelude",":") [Lit (Charc 't'),Comb ConsCall ("Prelude",":") [Lit (Charc 'u'),Comb ConsCall ("Prelude",":") [Lit (Charc 'v'),Comb ConsCall ("Prelude",":") [Lit (Charc 'w'),Comb ConsCall ("Prelude",":") [Lit (Charc 'x'),Comb ConsCall ("Prelude",":") [Lit (Charc 'y'),Comb ConsCall ("Prelude",":") [Lit (Charc 'z'),Comb ConsCall ("Prelude",":") [Lit (Charc '{'),Comb ConsCall ("Prelude",":") [Lit (Charc '|'),Comb ConsCall ("Prelude",":") [Lit (Charc '}'),Comb ConsCall ("Prelude",":") [Lit (Charc '~'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],Var 1])),Func ("ReadWriteBase","intToASCII") 100000 Public (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [1] (Case Rigid (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#<#Prelude.Ord#Prelude.Int") [],Var 1],Comb FuncCall ("ReadWriteBase","lc") [Comb (FuncPartCall 1) ("Prelude","_inst#Prelude.Num#Prelude.Int") []]]) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude",":") [Comb FuncCall ("ReadWriteBase","lookupCoding") [Var 1],Comb ConsCall ("Prelude","[]") []]),Branch (Pattern ("Prelude","False") []) (Case Rigid (Comb FuncCall ("Prelude","otherwise") []) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("ReadWriteBase","intToASCII") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#div#Prelude.Integral#Prelude.Int") [],Var 1],Comb FuncCall ("ReadWriteBase","lc") [Comb (FuncPartCall 1) ("Prelude","_inst#Prelude.Num#Prelude.Int") []]]],Comb ConsCall ("Prelude",":") [Comb FuncCall ("ReadWriteBase","lookupCoding") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#mod#Prelude.Integral#Prelude.Int") [],Var 1],Comb FuncCall ("ReadWriteBase","lc") [Comb (FuncPartCall 1) ("Prelude","_inst#Prelude.Num#Prelude.Int") []]]],Comb ConsCall ("Prelude","[]") []]]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","failed") [])])])),Func ("ReadWriteBase","writeString") 100000 Public (FuncType (TCons ("Data.Map","Map") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","(,)") [TCons ("Data.Map","Map") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])]))) (Rule [1,2] (Case Rigid (Comb FuncCall ("ReadWriteBase","writeString.isStub.10") [Var 2]) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude","(,)") [Var 1,Comb FuncCall ("Prelude",".") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","showChar") [],Lit (Charc ';')],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","showString") [Var 2],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","showChar") [],Lit (Charc '"')]]]]),Branch (Pattern ("Prelude","False") []) (Case Rigid (Comb FuncCall ("Prelude","otherwise") []) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Comb FuncCall ("Data.Map","lookup") [Comb (FuncPartCall 1) ("Prelude","_inst#Prelude.Ord#[]") [Comb (FuncPartCall 1) ("Prelude","_inst#Prelude.Ord#Prelude.Char") []],Var 2,Var 1]) [Branch (Pattern ("Prelude","Just") [3]) (Comb ConsCall ("Prelude","(,)") [Var 1,Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","showString") [Var 3],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","showChar") [],Lit (Charc ';')]]]),Branch (Pattern ("Prelude","Nothing") []) (Let [(4,Comb FuncCall ("ReadWriteBase","intToASCII") [Comb FuncCall ("Data.Map","size") [Var 1]])] (Comb ConsCall ("Prelude","(,)") [Comb FuncCall ("Data.Map","insert") [Comb (FuncPartCall 1) ("Prelude","_inst#Prelude.Ord#[]") [Comb (FuncPartCall 1) ("Prelude","_inst#Prelude.Ord#Prelude.Char") []],Var 2,Var 4,Var 1],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","showString") [Var 4],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","showChar") [],Lit (Charc ';')]]]))]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","failed") [])])])),Func ("ReadWriteBase","writeString.isStub.10") 100000 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","Bool") [])) (Rule [1] (Let [(2,Case Rigid (Var 1) [Branch (Pattern ("Prelude",":") [3,4]) (Case Rigid (Var 4) [Branch (Pattern ("Prelude",":") [5,6]) (Case Rigid (Var 6) [Branch (Pattern ("Prelude",":") [7,8]) (Case Rigid (Var 8) [Branch (Pattern ("Prelude",":") [9,10]) (Case Rigid (Var 10) [Branch (Pattern ("Prelude",":") [11,12]) (Case Rigid (Var 12) [Branch (Pattern ("Prelude",":") [13,14]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude","True") [])]),Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude","True") [])]),Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude","True") [])]),Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude","True") [])]),Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude","True") [])]),Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude","True") [])])] (Comb FuncCall ("Prelude","&&") [Var 2,Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Prelude","$") [Comb (FuncPartCall 1) ("Prelude","not") [],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","elem") [Comb (FuncPartCall 1) ("Prelude","_inst#Prelude.Eq#Prelude.Char") [],Lit (Charc '"')],Var 1]],Comb FuncCall ("Prelude","$") [Comb (FuncPartCall 1) ("Prelude","not") [],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","elem") [Comb (FuncPartCall 1) ("Prelude","_inst#Prelude.Eq#Prelude.Char") [],Lit (Charc '\n')],Var 1]]]]))),Func ("ReadWriteBase","escapeChar") 100000 Public (FuncType (TCons ("Prelude","Char") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [1] (Case Rigid (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#===#Prelude.Data#Prelude.Char") [],Var 1],Lit (Charc '"')]) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude",":") [Lit (Charc '\\'),Comb ConsCall ("Prelude",":") [Lit (Charc '"'),Comb ConsCall ("Prelude","[]") []]]),Branch (Pattern ("Prelude","False") []) (Case Rigid (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#===#Prelude.Data#Prelude.Char") [],Var 1],Lit (Charc '\a')]) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude",":") [Lit (Charc '\\'),Comb ConsCall ("Prelude",":") [Lit (Charc 'a'),Comb ConsCall ("Prelude","[]") []]]),Branch (Pattern ("Prelude","False") []) (Case Rigid (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#===#Prelude.Data#Prelude.Char") [],Var 1],Lit (Charc '\b')]) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude",":") [Lit (Charc '\\'),Comb ConsCall ("Prelude",":") [Lit (Charc 'b'),Comb ConsCall ("Prelude","[]") []]]),Branch (Pattern ("Prelude","False") []) (Case Rigid (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#===#Prelude.Data#Prelude.Char") [],Var 1],Lit (Charc '\t')]) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude",":") [Lit (Charc '\\'),Comb ConsCall ("Prelude",":") [Lit (Charc 't'),Comb ConsCall ("Prelude","[]") []]]),Branch (Pattern ("Prelude","False") []) (Case Rigid (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#===#Prelude.Data#Prelude.Char") [],Var 1],Lit (Charc '\n')]) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude",":") [Lit (Charc '\\'),Comb ConsCall ("Prelude",":") [Lit (Charc 'n'),Comb ConsCall ("Prelude","[]") []]]),Branch (Pattern ("Prelude","False") []) (Case Rigid (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#===#Prelude.Data#Prelude.Char") [],Var 1],Lit (Charc '\v')]) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude",":") [Lit (Charc '\\'),Comb ConsCall ("Prelude",":") [Lit (Charc 'v'),Comb ConsCall ("Prelude","[]") []]]),Branch (Pattern ("Prelude","False") []) (Case Rigid (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#===#Prelude.Data#Prelude.Char") [],Var 1],Lit (Charc '\f')]) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude",":") [Lit (Charc '\\'),Comb ConsCall ("Prelude",":") [Lit (Charc 'f'),Comb ConsCall ("Prelude","[]") []]]),Branch (Pattern ("Prelude","False") []) (Case Rigid (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#===#Prelude.Data#Prelude.Char") [],Var 1],Lit (Charc '\r')]) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude",":") [Lit (Charc '\\'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude","[]") []]]),Branch (Pattern ("Prelude","False") []) (Case Rigid (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#===#Prelude.Data#Prelude.Char") [],Var 1],Lit (Charc '\\')]) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude",":") [Lit (Charc '\\'),Comb ConsCall ("Prelude",":") [Lit (Charc '\\'),Comb ConsCall ("Prelude","[]") []]]),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("Prelude",":") [Var 1,Comb ConsCall ("Prelude","[]") []])])])])])])])])])])),Func ("ReadWriteBase","parseInput") 100000 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [1] (Let [(2,Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","break") [Comb (FuncPartCall 1) ("Prelude","flip") [Comb (FuncPartCall 2) ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [],Lit (Charc '\n')]],Var 1]),(3,Comb FuncCall ("ReadWriteBase","parseInput._#selFP95#encoding") [Var 2]),(4,Comb FuncCall ("ReadWriteBase","parseInput._#selFP96#strings") [Var 2])] (Comb ConsCall ("Prelude","(,)") [Var 3,Comb FuncCall ("ReadWriteBase","parseInput.parseStrings.56") [Var 4]]))),Func ("ReadWriteBase","parseInput._#selFP95#encoding") 100000 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [1] (Case Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Case Flex (Var 3) [Branch (Pattern ("Prelude",":") [4,5]) (Var 2)])])),Func ("ReadWriteBase","parseInput._#selFP96#strings") 100000 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [1] (Case Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Case Flex (Var 3) [Branch (Pattern ("Prelude",":") [4,5]) (Var 5)])])),Func ("ReadWriteBase","parseInput.parseStrings.56") 100000 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]])) (Rule [1] (Case Rigid (Var 1) [Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude","[]") []),Branch (Pattern ("Prelude",":") [2,3]) (Let [(4,Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","break") [Comb (FuncPartCall 1) ("Prelude","flip") [Comb (FuncPartCall 2) ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [],Lit (Charc ';')]],Var 1]),(5,Comb FuncCall ("ReadWriteBase","parseInput.parseStrings.56._#selFP93#len") [Var 4]),(6,Comb FuncCall ("ReadWriteBase","parseInput.parseStrings.56._#selFP94#xs'") [Var 4])] (Comb FuncCall ("Prelude","ifThenElse") [Comb FuncCall ("Prelude","null") [Var 5],Let [(7,Comb FuncCall ("Prelude","span") [Comb (FuncPartCall 1) ("Prelude","flip") [Comb FuncCall ("Prelude","_impl#/=#Prelude.Eq#Prelude.Char") [],Lit (Charc '\n')],Var 6]),(8,Comb FuncCall ("ReadWriteBase","parseInput.parseStrings.56._#selFP88#str") [Var 7]),(9,Comb FuncCall ("ReadWriteBase","parseInput.parseStrings.56._#selFP89#xs''") [Var 7])] (Comb ConsCall ("Prelude",":") [Var 8,Comb FuncCall ("ReadWriteBase","parseInput.parseStrings.56") [Comb FuncCall ("Prelude","drop") [Lit (Intc 1),Var 9]]]),Let [(10,Comb FuncCall ("Prelude","splitAt") [Typed (Comb FuncCall ("Prelude","read") [Comb (FuncPartCall 1) ("Prelude","_inst#Prelude.Read#Prelude.Int") [],Var 5]) (TCons ("Prelude","Int") []),Var 6]),(11,Comb FuncCall ("ReadWriteBase","parseInput.parseStrings.56._#selFP91#str") [Var 10]),(12,Comb FuncCall ("ReadWriteBase","parseInput.parseStrings.56._#selFP92#xs''") [Var 10])] (Comb ConsCall ("Prelude",":") [Var 11,Comb FuncCall ("ReadWriteBase","parseInput.parseStrings.56") [Var 12]])]))])),Func ("ReadWriteBase","parseInput.parseStrings.56._#selFP93#len") 100000 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [1] (Case Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Case Flex (Var 3) [Branch (Pattern ("Prelude",":") [4,5]) (Var 2)])])),Func ("ReadWriteBase","parseInput.parseStrings.56._#selFP94#xs'") 100000 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [1] (Case Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Case Flex (Var 3) [Branch (Pattern ("Prelude",":") [4,5]) (Var 5)])])),Func ("ReadWriteBase","parseInput.parseStrings.56._#selFP88#str") 100000 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [1] (Case Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Var 2)])),Func ("ReadWriteBase","parseInput.parseStrings.56._#selFP89#xs''") 100000 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [1] (Case Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Var 3)])),Func ("ReadWriteBase","parseInput.parseStrings.56._#selFP91#str") 100000 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [1] (Case Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Var 2)])),Func ("ReadWriteBase","parseInput.parseStrings.56._#selFP92#xs''") 100000 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [1] (Case Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Var 3)])),Func ("ReadWriteBase","readData") 100000 Public (ForallType [(0,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("ReadWriteBase","_Dict#ReadWrite") [TVar 0])) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TVar 0)))) (Rule [1,2] (Let [(3,Comb FuncCall ("ReadWriteBase","parseInput") [Var 2]),(4,Comb FuncCall ("ReadWriteBase","readData._#selFP98#encoding") [Var 3]),(5,Comb FuncCall ("ReadWriteBase","readData._#selFP99#strings") [Var 3])] (Comb FuncCall ("Prelude","$") [Comb (FuncPartCall 1) ("Prelude","fst") [],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("ReadWriteBase","readRW") [Var 1],Comb FuncCall ("Prelude","$") [Comb (FuncPartCall 1) ("Data.Map","fromList") [Comb (FuncPartCall 1) ("Prelude","_inst#Prelude.Ord#[]") [Comb (FuncPartCall 1) ("Prelude","_inst#Prelude.Ord#Prelude.Char") []]],Comb FuncCall ("Prelude","zip") [Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("ReadWriteBase","intToASCII") [],Comb FuncCall ("Prelude","_impl#enumFrom#Prelude.Enum#Prelude.Int") [Lit (Intc 0)]],Var 5]]],Var 4]]))),Func ("ReadWriteBase","readData._#selFP98#encoding") 100000 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [1] (Case Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Var 2)])),Func ("ReadWriteBase","readData._#selFP99#strings") 100000 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]])) (Rule [1] (Case Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Var 3)])),Func ("ReadWriteBase","showData") 100000 Public (ForallType [(0,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("ReadWriteBase","_Dict#ReadWrite") [TVar 0])) (FuncType (TVar 0) (TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]])))) (Rule [1,2] (Let [(3,Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("ReadWriteBase","showRW") [Var 1],Comb FuncCall ("Data.Map","empty") []],Var 2]),(4,Comb FuncCall ("ReadWriteBase","showData._#selFP101#ls") [Var 3]),(5,Comb FuncCall ("ReadWriteBase","showData._#selFP102#l") [Var 3])] (Comb ConsCall ("Prelude",":") [Comb FuncCall ("Prelude","apply") [Var 5,Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("ReadWriteBase","keysOrdByVal") [Var 4]]))),Func ("ReadWriteBase","showData._#selFP101#ls") 100000 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Data.Map","Map") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])]) (TCons ("Data.Map","Map") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]])) (Rule [1] (Case Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Var 2)])),Func ("ReadWriteBase","showData._#selFP102#l") 100000 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Data.Map","Map") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (Rule [1] (Case Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Var 3)])),Func ("ReadWriteBase","writeDataFile") 100000 Public (ForallType [(0,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("ReadWriteBase","_Dict#ReadWrite") [TVar 0])) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TVar 0) (TCons ("Prelude","IO") [TCons ("Prelude","()") []]))))) (Rule [1,2,3] (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#>>=#Prelude.Monad#Prelude.IO") [],Comb FuncCall ("System.IO","openFile") [Var 2,Comb ConsCall ("System.IO","WriteMode") []]],Comb (FuncPartCall 1) ("ReadWriteBase","writeDataFile._#lambda9") [Var 3,Var 1]])),Func ("ReadWriteBase","writeDataFile._#lambda9") 100000 Private (ForallType [(0,KStar)] (FuncType (TVar 0) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("ReadWriteBase","_Dict#ReadWrite") [TVar 0])) (FuncType (TCons ("System.IO","Handle") []) (TCons ("Prelude","IO") [TCons ("Prelude","()") []]))))) (Rule [1,2,3] (Let [(4,Var 3)] (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#>>=#Prelude.Monad#Prelude.IO") [],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("ReadWriteBase","writeRW") [Var 2],Var 4],Var 1],Comb FuncCall ("Data.Map","empty") []]],Comb (FuncPartCall 1) ("ReadWriteBase","writeDataFile._#lambda9._#lambda11") [Var 4]]))),Func ("ReadWriteBase","writeDataFile._#lambda9._#lambda11") 100000 Private (FuncType (TCons ("System.IO","Handle") []) (FuncType (TCons ("Data.Map","Map") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","IO") [TCons ("Prelude","()") []]))) (Rule [1,2] (Let [(3,Var 2)] (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#>>#Prelude.Monad#Prelude.IO") [],Comb FuncCall ("System.IO","hPutStr") [Var 1,Comb ConsCall ("Prelude",":") [Lit (Charc '\n'),Comb ConsCall ("Prelude","[]") []]]],Let [(4,Comb FuncCall ("ReadWriteBase","keysOrdByVal") [Var 3])] (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#>>#Prelude.Monad#Prelude.IO") [],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","mapM_") [Comb (FuncPartCall 1) ("Prelude","_inst#Prelude.Monad#Prelude.IO") [],Comb (FuncPartCall 1) ("System.IO","hPutStr") [Var 1]],Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("ReadWriteBase","outputStr") [],Var 4]]],Comb FuncCall ("System.IO","hClose") [Var 1]])]))),Func ("ReadWriteBase","outputStr") 100000 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [1] (Case Rigid (Comb FuncCall ("ReadWriteBase","containsNewline") [Var 1]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#show#Prelude.Show#Prelude.Int") [],Comb FuncCall ("Prelude","length") [Var 1]],Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc ';'),Comb ConsCall ("Prelude","[]") []],Var 1]]),Branch (Pattern ("Prelude","False") []) (Case Rigid (Comb FuncCall ("Prelude","otherwise") []) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc ';'),Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("Prelude","++") [Var 1,Comb ConsCall ("Prelude",":") [Lit (Charc '\n'),Comb ConsCall ("Prelude","[]") []]]]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","failed") [])])])),Func ("ReadWriteBase","containsNewline") 100000 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","Bool") [])) (Rule [1] (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","elem") [Comb (FuncPartCall 1) ("Prelude","_inst#Prelude.Eq#Prelude.Char") [],Lit (Charc '\n')],Var 1])),Func ("ReadWriteBase","ordHex") 100000 Public (ForallType [(0,KStar),(1,KStar),(2,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Ord") [TVar 0])) (FuncType (TCons ("Prelude","(,)") [TVar 2,TCons ("Prelude","[]") [TVar 0]]) (FuncType (TCons ("Prelude","(,)") [TVar 1,TCons ("Prelude","[]") [TVar 0]]) (TCons ("Prelude","Bool") []))))) (Rule [1,2,3] (Case Flex (Var 2) [Branch (Pattern ("Prelude","(,)") [4,5]) (Case Flex (Var 3) [Branch (Pattern ("Prelude","(,)") [6,7]) (Case Rigid (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#<#Prelude.Ord#Prelude.Int") [],Comb FuncCall ("Prelude","length") [Var 5]],Comb FuncCall ("Prelude","length") [Var 7]]) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude","True") []),Branch (Pattern ("Prelude","False") []) (Case Rigid (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#>#Prelude.Ord#Prelude.Int") [],Comb FuncCall ("Prelude","length") [Var 5]],Comb FuncCall ("Prelude","length") [Var 7]]) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Prelude","False") []) (Case Rigid (Comb FuncCall ("Prelude","otherwise") []) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#<#Prelude.Ord#[]") [Var 1],Var 5],Var 7]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","failed") [])])])])])])),Func ("ReadWriteBase","keysOrdByVal") 100000 Public (FuncType (TCons ("Data.Map","Map") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]])) (Rule [1] (Comb FuncCall ("Prelude","$") [Comb (FuncPartCall 1) ("Prelude","map") [Comb (FuncPartCall 1) ("Prelude","fst") []],Comb FuncCall ("Prelude","$") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Data.List","sortBy") [],Comb (FuncPartCall 2) ("ReadWriteBase","ordHex") [Comb (FuncPartCall 1) ("Prelude","_inst#Prelude.Ord#Prelude.Char") []]],Comb FuncCall ("Data.Map","toList") [Var 1]]])),Func ("ReadWriteBase","readStringId") 100000 Public (FuncType (TCons ("Data.Map","Map") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]))) (Rule [1,2] (Case Flex (Var 2) [Branch (Pattern ("Prelude",":") [3,4]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 3,Lit (Charc ';')]) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Prelude","[]") [],Var 4]),Branch (Pattern ("Prelude","False") []) (Case Rigid (Comb FuncCall ("Prelude","otherwise") []) [Branch (Pattern ("Prelude","True") []) (Let [(5,Comb FuncCall ("ReadWriteBase","readStringId") [Var 1,Var 4]),(6,Comb FuncCall ("ReadWriteBase","readStringId._#selFP104#xs") [Var 5]),(7,Comb FuncCall ("ReadWriteBase","readStringId._#selFP105#r1") [Var 5])] (Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Prelude",":") [Var 3,Var 6],Var 7])),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","failed") [])])])])),Func ("ReadWriteBase","readStringId._#selFP104#xs") 100000 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [1] (Case Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Var 2)])),Func ("ReadWriteBase","readStringId._#selFP105#r1") 100000 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [1] (Case Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Var 3)])),Func ("ReadWriteBase","readRW") 100000 Public (ForallType [(0,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("ReadWriteBase","_Dict#ReadWrite") [TVar 0])) (FuncType (TCons ("Data.Map","Map") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","(,)") [TVar 0,TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]))))) (Rule [1] (Comb FuncCall ("ReadWriteBase","readRW._#lambda") [Comb FuncCall ("Prelude","apply") [Var 1,Comb ConsCall ("Prelude","()") []]])),Func ("ReadWriteBase","readRW._#lambda") 100000 Private (ForallType [(0,KStar)] (FuncType (TCons ("ReadWriteBase","_Dict#ReadWrite") [TVar 0]) (FuncType (TCons ("Data.Map","Map") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","(,)") [TVar 0,TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]))))) (Rule [1] (Case Flex (Var 1) [Branch (Pattern ("ReadWriteBase","_Dict#ReadWrite") [2,3,4,5,6,7,8]) (Var 2)])),Func ("ReadWriteBase","showRW") 100000 Public (ForallType [(0,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("ReadWriteBase","_Dict#ReadWrite") [TVar 0])) (FuncType (TCons ("Data.Map","Map") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TVar 0) (TCons ("Prelude","(,)") [TCons ("Data.Map","Map") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])]))))) (Rule [1] (Comb FuncCall ("ReadWriteBase","showRW._#lambda") [Comb FuncCall ("Prelude","apply") [Var 1,Comb ConsCall ("Prelude","()") []]])),Func ("ReadWriteBase","showRW._#lambda") 100000 Private (ForallType [(0,KStar)] (FuncType (TCons ("ReadWriteBase","_Dict#ReadWrite") [TVar 0]) (FuncType (TCons ("Data.Map","Map") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TVar 0) (TCons ("Prelude","(,)") [TCons ("Data.Map","Map") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])]))))) (Rule [1] (Case Flex (Var 1) [Branch (Pattern ("ReadWriteBase","_Dict#ReadWrite") [2,3,4,5,6,7,8]) (Var 3)])),Func ("ReadWriteBase","showType") 100000 Public (ForallType [(0,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("ReadWriteBase","_Dict#ReadWrite") [TVar 0])) (FuncType (TVar 0) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])))) (Rule [1] (Comb FuncCall ("ReadWriteBase","showType._#lambda") [Comb FuncCall ("Prelude","apply") [Var 1,Comb ConsCall ("Prelude","()") []]])),Func ("ReadWriteBase","showType._#lambda") 100000 Private (ForallType [(0,KStar)] (FuncType (TCons ("ReadWriteBase","_Dict#ReadWrite") [TVar 0]) (FuncType (TVar 0) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])))) (Rule [1] (Case Flex (Var 1) [Branch (Pattern ("ReadWriteBase","_Dict#ReadWrite") [2,3,4,5,6,7,8]) (Var 4)])),Func ("ReadWriteBase","writeRW") 100000 Public (ForallType [(0,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("ReadWriteBase","_Dict#ReadWrite") [TVar 0])) (FuncType (TCons ("System.IO","Handle") []) (FuncType (TVar 0) (FuncType (TCons ("Data.Map","Map") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","IO") [TCons ("Data.Map","Map") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))))) (Rule [1] (Comb FuncCall ("ReadWriteBase","writeRW._#lambda") [Comb FuncCall ("Prelude","apply") [Var 1,Comb ConsCall ("Prelude","()") []]])),Func ("ReadWriteBase","writeRW._#lambda") 100000 Private (ForallType [(0,KStar)] (FuncType (TCons ("ReadWriteBase","_Dict#ReadWrite") [TVar 0]) (FuncType (TCons ("System.IO","Handle") []) (FuncType (TVar 0) (FuncType (TCons ("Data.Map","Map") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","IO") [TCons ("Data.Map","Map") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))))) (Rule [1] (Case Flex (Var 1) [Branch (Pattern ("ReadWriteBase","_Dict#ReadWrite") [2,3,4,5,6,7,8]) (Var 5)])),Func ("ReadWriteBase","readListRW") 100000 Public (ForallType [(0,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("ReadWriteBase","_Dict#ReadWrite") [TVar 0])) (FuncType (TCons ("Data.Map","Map") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]))))) (Rule [1] (Comb FuncCall ("ReadWriteBase","readListRW._#lambda") [Comb FuncCall ("Prelude","apply") [Var 1,Comb ConsCall ("Prelude","()") []]])),Func ("ReadWriteBase","readListRW._#lambda") 100000 Private (ForallType [(0,KStar)] (FuncType (TCons ("ReadWriteBase","_Dict#ReadWrite") [TVar 0]) (FuncType (TCons ("Data.Map","Map") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]))))) (Rule [1] (Case Flex (Var 1) [Branch (Pattern ("ReadWriteBase","_Dict#ReadWrite") [2,3,4,5,6,7,8]) (Var 6)])),Func ("ReadWriteBase","showListRW") 100000 Public (ForallType [(0,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("ReadWriteBase","_Dict#ReadWrite") [TVar 0])) (FuncType (TCons ("Data.Map","Map") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","(,)") [TCons ("Data.Map","Map") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])]))))) (Rule [1] (Comb FuncCall ("ReadWriteBase","showListRW._#lambda") [Comb FuncCall ("Prelude","apply") [Var 1,Comb ConsCall ("Prelude","()") []]])),Func ("ReadWriteBase","showListRW._#lambda") 100000 Private (ForallType [(0,KStar)] (FuncType (TCons ("ReadWriteBase","_Dict#ReadWrite") [TVar 0]) (FuncType (TCons ("Data.Map","Map") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","(,)") [TCons ("Data.Map","Map") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])]))))) (Rule [1] (Case Flex (Var 1) [Branch (Pattern ("ReadWriteBase","_Dict#ReadWrite") [2,3,4,5,6,7,8]) (Var 7)])),Func ("ReadWriteBase","writeListRW") 100000 Public (ForallType [(0,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("ReadWriteBase","_Dict#ReadWrite") [TVar 0])) (FuncType (TCons ("System.IO","Handle") []) (FuncType (TCons ("Prelude","[]") [TVar 0]) (FuncType (TCons ("Data.Map","Map") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","IO") [TCons ("Data.Map","Map") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))))) (Rule [1] (Comb FuncCall ("ReadWriteBase","writeListRW._#lambda") [Comb FuncCall ("Prelude","apply") [Var 1,Comb ConsCall ("Prelude","()") []]])),Func ("ReadWriteBase","writeListRW._#lambda") 100000 Private (ForallType [(0,KStar)] (FuncType (TCons ("ReadWriteBase","_Dict#ReadWrite") [TVar 0]) (FuncType (TCons ("System.IO","Handle") []) (FuncType (TCons ("Prelude","[]") [TVar 0]) (FuncType (TCons ("Data.Map","Map") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","IO") [TCons ("Data.Map","Map") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))))) (Rule [1] (Case Flex (Var 1) [Branch (Pattern ("ReadWriteBase","_Dict#ReadWrite") [2,3,4,5,6,7,8]) (Var 8)]))] []